
rfid_mathat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08003f5c  08003f5c  00013f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004140  08004140  00020170  2**0
                  CONTENTS
  4 .ARM          00000000  08004140  08004140  00020170  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004140  08004140  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004140  08004140  00014140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  08004148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000170  080042b8  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  080042b8  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008142  00000000  00000000  00020199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001944  00000000  00000000  000282db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  00029c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002a590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f1f  00000000  00000000  0002ae58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b7b  00000000  00000000  00042d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085b39  00000000  00000000  0004c8f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d242b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003104  00000000  00000000  000d247c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000170 	.word	0x20000170
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f44 	.word	0x08003f44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000174 	.word	0x20000174
 8000148:	08003f44 	.word	0x08003f44

0800014c <led>:

/**
  * @brief  The application entry point.
  * @retval int
  */
void led(uint8_t n) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < n; i++) {
 8000156:	2300      	movs	r3, #0
 8000158:	73fb      	strb	r3, [r7, #15]
 800015a:	e014      	b.n	8000186 <led+0x3a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);    // LED1 ON
 800015c:	2200      	movs	r2, #0
 800015e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000162:	480d      	ldr	r0, [pc, #52]	; (8000198 <led+0x4c>)
 8000164:	f001 fbbe 	bl	80018e4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000168:	2064      	movs	r0, #100	; 0x64
 800016a:	f001 f92f 	bl	80013cc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);    // LED1 OFF
 800016e:	2201      	movs	r2, #1
 8000170:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000174:	4808      	ldr	r0, [pc, #32]	; (8000198 <led+0x4c>)
 8000176:	f001 fbb5 	bl	80018e4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800017a:	2064      	movs	r0, #100	; 0x64
 800017c:	f001 f926 	bl	80013cc <HAL_Delay>
	for (uint8_t i = 0; i < n; i++) {
 8000180:	7bfb      	ldrb	r3, [r7, #15]
 8000182:	3301      	adds	r3, #1
 8000184:	73fb      	strb	r3, [r7, #15]
 8000186:	7bfa      	ldrb	r2, [r7, #15]
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	429a      	cmp	r2, r3
 800018c:	d3e6      	bcc.n	800015c <led+0x10>
	}
}
 800018e:	bf00      	nop
 8000190:	bf00      	nop
 8000192:	3710      	adds	r7, #16
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}
 8000198:	40011000 	.word	0x40011000

0800019c <generate_random>:
uint8_t * generate_random() { //this will generate random number in range l and r
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
    uint8_t i;
    static uint8_t chars[20];

    srand(HAL_GetTick());
 80001a2:	f001 f909 	bl	80013b8 <HAL_GetTick>
 80001a6:	4603      	mov	r3, r0
 80001a8:	4618      	mov	r0, r3
 80001aa:	f002 fc83 	bl	8002ab4 <srand>

   for (i = 0; i < 16; i++) {
 80001ae:	2300      	movs	r3, #0
 80001b0:	71fb      	strb	r3, [r7, #7]
 80001b2:	e017      	b.n	80001e4 <generate_random+0x48>
      uint8_t rand_num = (rand() % (126 - 55 + 1)) + 55;
 80001b4:	f002 fcac 	bl	8002b10 <rand>
 80001b8:	4602      	mov	r2, r0
 80001ba:	4b0e      	ldr	r3, [pc, #56]	; (80001f4 <generate_random+0x58>)
 80001bc:	fb83 1302 	smull	r1, r3, r3, r2
 80001c0:	1119      	asrs	r1, r3, #4
 80001c2:	17d3      	asrs	r3, r2, #31
 80001c4:	1ac9      	subs	r1, r1, r3
 80001c6:	460b      	mov	r3, r1
 80001c8:	00db      	lsls	r3, r3, #3
 80001ca:	440b      	add	r3, r1
 80001cc:	00db      	lsls	r3, r3, #3
 80001ce:	1ad1      	subs	r1, r2, r3
 80001d0:	b2cb      	uxtb	r3, r1
 80001d2:	3337      	adds	r3, #55	; 0x37
 80001d4:	71bb      	strb	r3, [r7, #6]
      chars[i] = rand_num;
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	4907      	ldr	r1, [pc, #28]	; (80001f8 <generate_random+0x5c>)
 80001da:	79ba      	ldrb	r2, [r7, #6]
 80001dc:	54ca      	strb	r2, [r1, r3]
   for (i = 0; i < 16; i++) {
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	3301      	adds	r3, #1
 80001e2:	71fb      	strb	r3, [r7, #7]
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	2b0f      	cmp	r3, #15
 80001e8:	d9e4      	bls.n	80001b4 <generate_random+0x18>
   }
    return chars;
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <generate_random+0x5c>)

}
 80001ec:	4618      	mov	r0, r3
 80001ee:	3708      	adds	r7, #8
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	38e38e39 	.word	0x38e38e39
 80001f8:	2000030c 	.word	0x2000030c

080001fc <main>:
int main(void)
{
 80001fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001fe:	b099      	sub	sp, #100	; 0x64
 8000200:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000202:	f001 f881 	bl	8001308 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f9ed 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 fa91 	bl	8000730 <MX_GPIO_Init>
  MX_SPI1_Init();
 800020e:	f000 fa2f 	bl	8000670 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000212:	f000 fa63 	bl	80006dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	MFRC522_Init();
 8000216:	f000 fe5b 	bl	8000ed0 <MFRC522_Init>
	led(3);
 800021a:	2003      	movs	r0, #3
 800021c:	f7ff ff96 	bl	800014c <led>

  /* USER CODE END 2 */
	cardRead = 0;
 8000220:	4b77      	ldr	r3, [pc, #476]	; (8000400 <main+0x204>)
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
	cardRead1 = 0;
 8000226:	4b77      	ldr	r3, [pc, #476]	; (8000404 <main+0x208>)
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
	cardRead2 = 0;
 800022c:	4b76      	ldr	r3, [pc, #472]	; (8000408 <main+0x20c>)
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(10);
 8000232:	200a      	movs	r0, #10
 8000234:	f001 f8ca 	bl	80013cc <HAL_Delay>
	  //sprintf((char*) buff, "ID: %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c\r\n", (p+1));

	  //HAL_UART_Transmit(&huart2, p, 16, 200);

	  while(cardRead1 == 0){
 8000238:	e02a      	b.n	8000290 <main+0x94>
	   	MFRC522_Init();
 800023a:	f000 fe49 	bl	8000ed0 <MFRC522_Init>
	   		if (!MFRC522_Request(PICC_REQIDL, str)) {
 800023e:	4973      	ldr	r1, [pc, #460]	; (800040c <main+0x210>)
 8000240:	2026      	movs	r0, #38	; 0x26
 8000242:	f000 fb9d 	bl	8000980 <MFRC522_Request>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d121      	bne.n	8000290 <main+0x94>
	   			if (!MFRC522_Anticoll(str)) {
 800024c:	486f      	ldr	r0, [pc, #444]	; (800040c <main+0x210>)
 800024e:	f000 fc8b 	bl	8000b68 <MFRC522_Anticoll>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d11b      	bne.n	8000290 <main+0x94>
	   				sprintf((char*) buff, "ID: \"%x%x%x%x\" ", str[0], str[1],str[2], str[3]);
 8000258:	4b6c      	ldr	r3, [pc, #432]	; (800040c <main+0x210>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	4619      	mov	r1, r3
 800025e:	4b6b      	ldr	r3, [pc, #428]	; (800040c <main+0x210>)
 8000260:	785b      	ldrb	r3, [r3, #1]
 8000262:	4618      	mov	r0, r3
 8000264:	4b69      	ldr	r3, [pc, #420]	; (800040c <main+0x210>)
 8000266:	789b      	ldrb	r3, [r3, #2]
 8000268:	461a      	mov	r2, r3
 800026a:	4b68      	ldr	r3, [pc, #416]	; (800040c <main+0x210>)
 800026c:	78db      	ldrb	r3, [r3, #3]
 800026e:	9301      	str	r3, [sp, #4]
 8000270:	9200      	str	r2, [sp, #0]
 8000272:	4603      	mov	r3, r0
 8000274:	460a      	mov	r2, r1
 8000276:	4966      	ldr	r1, [pc, #408]	; (8000410 <main+0x214>)
 8000278:	4866      	ldr	r0, [pc, #408]	; (8000414 <main+0x218>)
 800027a:	f002 fc87 	bl	8002b8c <siprintf>
	   				HAL_UART_Transmit(&huart2, buff, sizeof buff/sizeof buff[0], 200);
 800027e:	23c8      	movs	r3, #200	; 0xc8
 8000280:	2240      	movs	r2, #64	; 0x40
 8000282:	4964      	ldr	r1, [pc, #400]	; (8000414 <main+0x218>)
 8000284:	4864      	ldr	r0, [pc, #400]	; (8000418 <main+0x21c>)
 8000286:	f002 fa78 	bl	800277a <HAL_UART_Transmit>
	   				cardRead1 = 1;
 800028a:	4b5e      	ldr	r3, [pc, #376]	; (8000404 <main+0x208>)
 800028c:	2201      	movs	r2, #1
 800028e:	601a      	str	r2, [r3, #0]
	  while(cardRead1 == 0){
 8000290:	4b5c      	ldr	r3, [pc, #368]	; (8000404 <main+0x208>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d0d0      	beq.n	800023a <main+0x3e>
	   			}
	   		}

	   }

p = generate_random();
 8000298:	f7ff ff80 	bl	800019c <generate_random>
 800029c:	6278      	str	r0, [r7, #36]	; 0x24

	  HAL_Delay(20);
 800029e:	2014      	movs	r0, #20
 80002a0:	f001 f894 	bl	80013cc <HAL_Delay>
	  MFRC522_Init();
 80002a4:	f000 fe14 	bl	8000ed0 <MFRC522_Init>
	while(cardRead == 0)	{
 80002a8:	e09e      	b.n	80003e8 <main+0x1ec>
			MFRC522_Init();
 80002aa:	f000 fe11 	bl	8000ed0 <MFRC522_Init>
			status = MFRC522_Request(PICC_REQIDL, str);
 80002ae:	4957      	ldr	r1, [pc, #348]	; (800040c <main+0x210>)
 80002b0:	2026      	movs	r0, #38	; 0x26
 80002b2:	f000 fb65 	bl	8000980 <MFRC522_Request>
 80002b6:	4603      	mov	r3, r0
 80002b8:	461a      	mov	r2, r3
 80002ba:	4b58      	ldr	r3, [pc, #352]	; (800041c <main+0x220>)
 80002bc:	701a      	strb	r2, [r3, #0]
			if (status == MI_OK) {
 80002be:	4b57      	ldr	r3, [pc, #348]	; (800041c <main+0x220>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	f040 8090 	bne.w	80003e8 <main+0x1ec>
				status = MFRC522_Anticoll(sn);
 80002c8:	4855      	ldr	r0, [pc, #340]	; (8000420 <main+0x224>)
 80002ca:	f000 fc4d 	bl	8000b68 <MFRC522_Anticoll>
 80002ce:	4603      	mov	r3, r0
 80002d0:	461a      	mov	r2, r3
 80002d2:	4b52      	ldr	r3, [pc, #328]	; (800041c <main+0x220>)
 80002d4:	701a      	strb	r2, [r3, #0]
				  if (status == MI_OK) {
 80002d6:	4b51      	ldr	r3, [pc, #324]	; (800041c <main+0x220>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8084 	bne.w	80003e8 <main+0x1ec>
					  RC_size = MFRC522_SelectTag(sn);
 80002e0:	484f      	ldr	r0, [pc, #316]	; (8000420 <main+0x224>)
 80002e2:	f000 fcc7 	bl	8000c74 <MFRC522_SelectTag>
 80002e6:	4603      	mov	r3, r0
 80002e8:	461a      	mov	r2, r3
 80002ea:	4b4e      	ldr	r3, [pc, #312]	; (8000424 <main+0x228>)
 80002ec:	701a      	strb	r2, [r3, #0]
						  if(RC_size != 0){
 80002ee:	4b4d      	ldr	r3, [pc, #308]	; (8000424 <main+0x228>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d078      	beq.n	80003e8 <main+0x1ec>
							  status = MFRC522_Auth(PICC_AUTHENT1A, 2, sectorKeyA[2], sn);
 80002f6:	4b4a      	ldr	r3, [pc, #296]	; (8000420 <main+0x224>)
 80002f8:	4a4b      	ldr	r2, [pc, #300]	; (8000428 <main+0x22c>)
 80002fa:	2102      	movs	r1, #2
 80002fc:	2060      	movs	r0, #96	; 0x60
 80002fe:	f000 fcfb 	bl	8000cf8 <MFRC522_Auth>
 8000302:	4603      	mov	r3, r0
 8000304:	461a      	mov	r2, r3
 8000306:	4b45      	ldr	r3, [pc, #276]	; (800041c <main+0x220>)
 8000308:	701a      	strb	r2, [r3, #0]
							  if(status == MI_OK){
 800030a:	4b44      	ldr	r3, [pc, #272]	; (800041c <main+0x220>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d16a      	bne.n	80003e8 <main+0x1ec>
								  status = MFRC522_Read(2, str1);
 8000312:	4946      	ldr	r1, [pc, #280]	; (800042c <main+0x230>)
 8000314:	2002      	movs	r0, #2
 8000316:	f000 fd42 	bl	8000d9e <MFRC522_Read>
 800031a:	4603      	mov	r3, r0
 800031c:	461a      	mov	r2, r3
 800031e:	4b3f      	ldr	r3, [pc, #252]	; (800041c <main+0x220>)
 8000320:	701a      	strb	r2, [r3, #0]
								  if(status == MI_OK){
 8000322:	4b3e      	ldr	r3, [pc, #248]	; (800041c <main+0x220>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d153      	bne.n	80003d2 <main+0x1d6>
									  //sprintf((char *)buff, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", str1[0],str1[1],str1[2],str1[3],str1[4],str1[5],str1[6],str1[7], str1[8],str1[9],str1[10],str1[11],str1[12],str1[13],str1[14],str1[15]);
									  sprintf((char *)buff, "CARD DATA: \"%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\" ", str1[0],str1[1],str1[2],str1[3],str1[4],str1[5],str1[6],str1[7], str1[8],str1[9],str1[10],str1[11],str1[12],str1[13],str1[14],str1[15]);
 800032a:	4b40      	ldr	r3, [pc, #256]	; (800042c <main+0x230>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	469c      	mov	ip, r3
 8000330:	4b3e      	ldr	r3, [pc, #248]	; (800042c <main+0x230>)
 8000332:	785b      	ldrb	r3, [r3, #1]
 8000334:	469e      	mov	lr, r3
 8000336:	4b3d      	ldr	r3, [pc, #244]	; (800042c <main+0x230>)
 8000338:	789b      	ldrb	r3, [r3, #2]
 800033a:	4618      	mov	r0, r3
 800033c:	4b3b      	ldr	r3, [pc, #236]	; (800042c <main+0x230>)
 800033e:	78db      	ldrb	r3, [r3, #3]
 8000340:	461c      	mov	r4, r3
 8000342:	4b3a      	ldr	r3, [pc, #232]	; (800042c <main+0x230>)
 8000344:	791b      	ldrb	r3, [r3, #4]
 8000346:	461d      	mov	r5, r3
 8000348:	4b38      	ldr	r3, [pc, #224]	; (800042c <main+0x230>)
 800034a:	795b      	ldrb	r3, [r3, #5]
 800034c:	461e      	mov	r6, r3
 800034e:	4b37      	ldr	r3, [pc, #220]	; (800042c <main+0x230>)
 8000350:	799b      	ldrb	r3, [r3, #6]
 8000352:	61fb      	str	r3, [r7, #28]
 8000354:	4b35      	ldr	r3, [pc, #212]	; (800042c <main+0x230>)
 8000356:	79db      	ldrb	r3, [r3, #7]
 8000358:	61bb      	str	r3, [r7, #24]
 800035a:	4b34      	ldr	r3, [pc, #208]	; (800042c <main+0x230>)
 800035c:	7a1b      	ldrb	r3, [r3, #8]
 800035e:	617b      	str	r3, [r7, #20]
 8000360:	4b32      	ldr	r3, [pc, #200]	; (800042c <main+0x230>)
 8000362:	7a5b      	ldrb	r3, [r3, #9]
 8000364:	613b      	str	r3, [r7, #16]
 8000366:	4b31      	ldr	r3, [pc, #196]	; (800042c <main+0x230>)
 8000368:	7a9b      	ldrb	r3, [r3, #10]
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	4b2f      	ldr	r3, [pc, #188]	; (800042c <main+0x230>)
 800036e:	7adb      	ldrb	r3, [r3, #11]
 8000370:	60bb      	str	r3, [r7, #8]
 8000372:	4b2e      	ldr	r3, [pc, #184]	; (800042c <main+0x230>)
 8000374:	7b1b      	ldrb	r3, [r3, #12]
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	4b2c      	ldr	r3, [pc, #176]	; (800042c <main+0x230>)
 800037a:	7b5b      	ldrb	r3, [r3, #13]
 800037c:	4619      	mov	r1, r3
 800037e:	4b2b      	ldr	r3, [pc, #172]	; (800042c <main+0x230>)
 8000380:	7b9b      	ldrb	r3, [r3, #14]
 8000382:	461a      	mov	r2, r3
 8000384:	4b29      	ldr	r3, [pc, #164]	; (800042c <main+0x230>)
 8000386:	7bdb      	ldrb	r3, [r3, #15]
 8000388:	930d      	str	r3, [sp, #52]	; 0x34
 800038a:	920c      	str	r2, [sp, #48]	; 0x30
 800038c:	910b      	str	r1, [sp, #44]	; 0x2c
 800038e:	687a      	ldr	r2, [r7, #4]
 8000390:	920a      	str	r2, [sp, #40]	; 0x28
 8000392:	68ba      	ldr	r2, [r7, #8]
 8000394:	9209      	str	r2, [sp, #36]	; 0x24
 8000396:	68fa      	ldr	r2, [r7, #12]
 8000398:	9208      	str	r2, [sp, #32]
 800039a:	693a      	ldr	r2, [r7, #16]
 800039c:	9207      	str	r2, [sp, #28]
 800039e:	697a      	ldr	r2, [r7, #20]
 80003a0:	9206      	str	r2, [sp, #24]
 80003a2:	69ba      	ldr	r2, [r7, #24]
 80003a4:	9205      	str	r2, [sp, #20]
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	9304      	str	r3, [sp, #16]
 80003aa:	9603      	str	r6, [sp, #12]
 80003ac:	9502      	str	r5, [sp, #8]
 80003ae:	9401      	str	r4, [sp, #4]
 80003b0:	9000      	str	r0, [sp, #0]
 80003b2:	4673      	mov	r3, lr
 80003b4:	4662      	mov	r2, ip
 80003b6:	491e      	ldr	r1, [pc, #120]	; (8000430 <main+0x234>)
 80003b8:	4816      	ldr	r0, [pc, #88]	; (8000414 <main+0x218>)
 80003ba:	f002 fbe7 	bl	8002b8c <siprintf>
									  HAL_UART_Transmit(&huart2, buff, sizeof buff/sizeof buff[0], 1000);
 80003be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003c2:	2240      	movs	r2, #64	; 0x40
 80003c4:	4913      	ldr	r1, [pc, #76]	; (8000414 <main+0x218>)
 80003c6:	4814      	ldr	r0, [pc, #80]	; (8000418 <main+0x21c>)
 80003c8:	f002 f9d7 	bl	800277a <HAL_UART_Transmit>
									  //HAL_UART_Transmit(&huart2, text1, sizeof text1/sizeof text1[0], 1000);
									  cardRead = 1;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <main+0x204>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	601a      	str	r2, [r3, #0]
								  }

								  if(status == MI_ERR){
 80003d2:	4b12      	ldr	r3, [pc, #72]	; (800041c <main+0x220>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b02      	cmp	r3, #2
 80003d8:	d106      	bne.n	80003e8 <main+0x1ec>
									  led(1);
 80003da:	2001      	movs	r0, #1
 80003dc:	f7ff feb6 	bl	800014c <led>
									  cardRead1 = 0;
 80003e0:	4b08      	ldr	r3, [pc, #32]	; (8000404 <main+0x208>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
									  break;
 80003e6:	e004      	b.n	80003f2 <main+0x1f6>
	while(cardRead == 0)	{
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <main+0x204>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	f43f af5c 	beq.w	80002aa <main+0xae>
						  }
					  }

				}
			}
HAL_Delay(20);
 80003f2:	2014      	movs	r0, #20
 80003f4:	f000 ffea 	bl	80013cc <HAL_Delay>
MFRC522_Init();
 80003f8:	f000 fd6a 	bl	8000ed0 <MFRC522_Init>
	while(cardRead2 == 0)	{
 80003fc:	e0c9      	b.n	8000592 <main+0x396>
 80003fe:	bf00      	nop
 8000400:	20000300 	.word	0x20000300
 8000404:	20000304 	.word	0x20000304
 8000408:	20000308 	.word	0x20000308
 800040c:	2000022c 	.word	0x2000022c
 8000410:	08003f5c 	.word	0x08003f5c
 8000414:	200002c0 	.word	0x200002c0
 8000418:	200001e4 	.word	0x200001e4
 800041c:	20000229 	.word	0x20000229
 8000420:	200002bc 	.word	0x200002bc
 8000424:	20000228 	.word	0x20000228
 8000428:	20000020 	.word	0x20000020
 800042c:	2000023c 	.word	0x2000023c
 8000430:	08003f6c 	.word	0x08003f6c
		MFRC522_Init();
 8000434:	f000 fd4c 	bl	8000ed0 <MFRC522_Init>
		status = MFRC522_Request(PICC_REQIDL, str);
 8000438:	495f      	ldr	r1, [pc, #380]	; (80005b8 <main+0x3bc>)
 800043a:	2026      	movs	r0, #38	; 0x26
 800043c:	f000 faa0 	bl	8000980 <MFRC522_Request>
 8000440:	4603      	mov	r3, r0
 8000442:	461a      	mov	r2, r3
 8000444:	4b5d      	ldr	r3, [pc, #372]	; (80005bc <main+0x3c0>)
 8000446:	701a      	strb	r2, [r3, #0]
		if (status == MI_OK) {
 8000448:	4b5c      	ldr	r3, [pc, #368]	; (80005bc <main+0x3c0>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	f040 80a0 	bne.w	8000592 <main+0x396>
			status = MFRC522_Anticoll(sn);
 8000452:	485b      	ldr	r0, [pc, #364]	; (80005c0 <main+0x3c4>)
 8000454:	f000 fb88 	bl	8000b68 <MFRC522_Anticoll>
 8000458:	4603      	mov	r3, r0
 800045a:	461a      	mov	r2, r3
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <main+0x3c0>)
 800045e:	701a      	strb	r2, [r3, #0]
			  if (status == MI_OK) {
 8000460:	4b56      	ldr	r3, [pc, #344]	; (80005bc <main+0x3c0>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	f040 8094 	bne.w	8000592 <main+0x396>
				  RC_size = MFRC522_SelectTag(sn);
 800046a:	4855      	ldr	r0, [pc, #340]	; (80005c0 <main+0x3c4>)
 800046c:	f000 fc02 	bl	8000c74 <MFRC522_SelectTag>
 8000470:	4603      	mov	r3, r0
 8000472:	461a      	mov	r2, r3
 8000474:	4b53      	ldr	r3, [pc, #332]	; (80005c4 <main+0x3c8>)
 8000476:	701a      	strb	r2, [r3, #0]
					  if(RC_size != 0){
 8000478:	4b52      	ldr	r3, [pc, #328]	; (80005c4 <main+0x3c8>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	f000 8088 	beq.w	8000592 <main+0x396>
						  status = MFRC522_Auth(PICC_AUTHENT1A, 2, sectorKeyA[2], sn);
 8000482:	4b4f      	ldr	r3, [pc, #316]	; (80005c0 <main+0x3c4>)
 8000484:	4a50      	ldr	r2, [pc, #320]	; (80005c8 <main+0x3cc>)
 8000486:	2102      	movs	r1, #2
 8000488:	2060      	movs	r0, #96	; 0x60
 800048a:	f000 fc35 	bl	8000cf8 <MFRC522_Auth>
 800048e:	4603      	mov	r3, r0
 8000490:	461a      	mov	r2, r3
 8000492:	4b4a      	ldr	r3, [pc, #296]	; (80005bc <main+0x3c0>)
 8000494:	701a      	strb	r2, [r3, #0]
						  if(status == MI_OK){
 8000496:	4b49      	ldr	r3, [pc, #292]	; (80005bc <main+0x3c0>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d179      	bne.n	8000592 <main+0x396>
							  status = MFRC522_Write(2, p);
 800049e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80004a0:	2002      	movs	r0, #2
 80004a2:	f000 fca8 	bl	8000df6 <MFRC522_Write>
 80004a6:	4603      	mov	r3, r0
 80004a8:	461a      	mov	r2, r3
 80004aa:	4b44      	ldr	r3, [pc, #272]	; (80005bc <main+0x3c0>)
 80004ac:	701a      	strb	r2, [r3, #0]
							  if(status == MI_OK){
 80004ae:	4b43      	ldr	r3, [pc, #268]	; (80005bc <main+0x3c0>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d162      	bne.n	800057c <main+0x380>
								  //sprintf((char *)buff, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", str1[0],str1[1],str1[2],str1[3],str1[4],str1[5],str1[6],str1[7], str1[8],str1[9],str1[10],str1[11],str1[12],str1[13],str1[14],str1[15]);
								  sprintf((char *)buff, "CARD WRITE: \"%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\"\n\r", *(p), *(p + 1), *(p + 2), *(p + 3), *(p + 4), *(p + 5), *(p + 6), *(p + 7), *(p + 8), *(p + 9), *(p + 10), *(p + 11), *(p + 12), *(p + 13), *(p + 14), *(p + 15) );
 80004b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	469c      	mov	ip, r3
 80004bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004be:	3301      	adds	r3, #1
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	469e      	mov	lr, r3
 80004c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c6:	3302      	adds	r3, #2
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	4618      	mov	r0, r3
 80004cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ce:	3303      	adds	r3, #3
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	461c      	mov	r4, r3
 80004d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004d6:	3304      	adds	r3, #4
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	461d      	mov	r5, r3
 80004dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004de:	3305      	adds	r3, #5
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	461e      	mov	r6, r3
 80004e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004e6:	3306      	adds	r3, #6
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	61fb      	str	r3, [r7, #28]
 80004ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ee:	3307      	adds	r3, #7
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	61bb      	str	r3, [r7, #24]
 80004f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f6:	3308      	adds	r3, #8
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004fe:	3309      	adds	r3, #9
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	613b      	str	r3, [r7, #16]
 8000504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000506:	330a      	adds	r3, #10
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800050e:	330b      	adds	r3, #11
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000516:	330c      	adds	r3, #12
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051e:	330d      	adds	r3, #13
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	4619      	mov	r1, r3
 8000524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000526:	330e      	adds	r3, #14
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	461a      	mov	r2, r3
 800052c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800052e:	330f      	adds	r3, #15
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	930d      	str	r3, [sp, #52]	; 0x34
 8000534:	920c      	str	r2, [sp, #48]	; 0x30
 8000536:	910b      	str	r1, [sp, #44]	; 0x2c
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	920a      	str	r2, [sp, #40]	; 0x28
 800053c:	68ba      	ldr	r2, [r7, #8]
 800053e:	9209      	str	r2, [sp, #36]	; 0x24
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	9208      	str	r2, [sp, #32]
 8000544:	693a      	ldr	r2, [r7, #16]
 8000546:	9207      	str	r2, [sp, #28]
 8000548:	697a      	ldr	r2, [r7, #20]
 800054a:	9206      	str	r2, [sp, #24]
 800054c:	69ba      	ldr	r2, [r7, #24]
 800054e:	9205      	str	r2, [sp, #20]
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	9304      	str	r3, [sp, #16]
 8000554:	9603      	str	r6, [sp, #12]
 8000556:	9502      	str	r5, [sp, #8]
 8000558:	9401      	str	r4, [sp, #4]
 800055a:	9000      	str	r0, [sp, #0]
 800055c:	4673      	mov	r3, lr
 800055e:	4662      	mov	r2, ip
 8000560:	491a      	ldr	r1, [pc, #104]	; (80005cc <main+0x3d0>)
 8000562:	481b      	ldr	r0, [pc, #108]	; (80005d0 <main+0x3d4>)
 8000564:	f002 fb12 	bl	8002b8c <siprintf>
								  //HAL_UART_Transmit(&huart2, buff, sizeof buff/sizeof buff[0], 1000);
								  HAL_UART_Transmit(&huart2, buff, sizeof buff/sizeof buff[0], 1000);
 8000568:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056c:	2240      	movs	r2, #64	; 0x40
 800056e:	4918      	ldr	r1, [pc, #96]	; (80005d0 <main+0x3d4>)
 8000570:	4818      	ldr	r0, [pc, #96]	; (80005d4 <main+0x3d8>)
 8000572:	f002 f902 	bl	800277a <HAL_UART_Transmit>
								  cardRead2 = 1;
 8000576:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <main+0x3dc>)
 8000578:	2201      	movs	r2, #1
 800057a:	601a      	str	r2, [r3, #0]
							  }

							  if(status == MI_ERR){
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <main+0x3c0>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b02      	cmp	r3, #2
 8000582:	d106      	bne.n	8000592 <main+0x396>
								  led(1);
 8000584:	2001      	movs	r0, #1
 8000586:	f7ff fde1 	bl	800014c <led>
								  cardRead2 = 0;
 800058a:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <main+0x3dc>)
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
								  break;
 8000590:	e004      	b.n	800059c <main+0x3a0>
	while(cardRead2 == 0)	{
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <main+0x3dc>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	f43f af4c 	beq.w	8000434 <main+0x238>
					  }
				  }

			}
		}
	cardRead = 0;
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <main+0x3e0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
	cardRead1 = 0;
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <main+0x3e4>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
	cardRead2 = 0;
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <main+0x3dc>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
	HAL_Delay(1000);
 80005ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b2:	f000 ff0b 	bl	80013cc <HAL_Delay>
	  HAL_Delay(10);
 80005b6:	e63c      	b.n	8000232 <main+0x36>
 80005b8:	2000022c 	.word	0x2000022c
 80005bc:	20000229 	.word	0x20000229
 80005c0:	200002bc 	.word	0x200002bc
 80005c4:	20000228 	.word	0x20000228
 80005c8:	20000020 	.word	0x20000020
 80005cc:	08003f9c 	.word	0x08003f9c
 80005d0:	200002c0 	.word	0x200002c0
 80005d4:	200001e4 	.word	0x200001e4
 80005d8:	20000308 	.word	0x20000308
 80005dc:	20000300 	.word	0x20000300
 80005e0:	20000304 	.word	0x20000304

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b090      	sub	sp, #64	; 0x40
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0318 	add.w	r3, r7, #24
 80005ee:	2228      	movs	r2, #40	; 0x28
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 fa56 	bl	8002aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000606:	2301      	movs	r3, #1
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000622:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0318 	add.w	r3, r7, #24
 800062c:	4618      	mov	r0, r3
 800062e:	f001 f971 	bl	8001914 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000638:	f000 f8da 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800064c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2102      	movs	r1, #2
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fbde 	bl	8001e18 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000662:	f000 f8c5 	bl	80007f0 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3740      	adds	r7, #64	; 0x40
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000674:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_SPI1_Init+0x64>)
 8000676:	4a18      	ldr	r2, [pc, #96]	; (80006d8 <MX_SPI1_Init+0x68>)
 8000678:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800067a:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_SPI1_Init+0x64>)
 800067c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000680:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_SPI1_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_SPI1_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_SPI1_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_SPI1_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_SPI1_Init+0x64>)
 800069c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_SPI1_Init+0x64>)
 80006a4:	2218      	movs	r2, #24
 80006a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_SPI1_Init+0x64>)
 80006bc:	220a      	movs	r2, #10
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_SPI1_Init+0x64>)
 80006c2:	f001 fd41 	bl	8002148 <HAL_SPI_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006cc:	f000 f890 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000018c 	.word	0x2000018c
 80006d8:	40013000 	.word	0x40013000

080006dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	; (800072c <MX_USART2_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000714:	f001 ffe4 	bl	80026e0 <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 f867 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200001e4 	.word	0x200001e4
 800072c:	40004400 	.word	0x40004400

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000744:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <MX_GPIO_Init+0xb4>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a26      	ldr	r2, [pc, #152]	; (80007e4 <MX_GPIO_Init+0xb4>)
 800074a:	f043 0310 	orr.w	r3, r3, #16
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <MX_GPIO_Init+0xb4>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0310 	and.w	r3, r3, #16
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075c:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_GPIO_Init+0xb4>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a20      	ldr	r2, [pc, #128]	; (80007e4 <MX_GPIO_Init+0xb4>)
 8000762:	f043 0320 	orr.w	r3, r3, #32
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_GPIO_Init+0xb4>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0320 	and.w	r3, r3, #32
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_GPIO_Init+0xb4>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a1a      	ldr	r2, [pc, #104]	; (80007e4 <MX_GPIO_Init+0xb4>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_GPIO_Init+0xb4>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0304 	and.w	r3, r3, #4
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000792:	4815      	ldr	r0, [pc, #84]	; (80007e8 <MX_GPIO_Init+0xb8>)
 8000794:	f001 f8a6 	bl	80018e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2110      	movs	r1, #16
 800079c:	4813      	ldr	r0, [pc, #76]	; (80007ec <MX_GPIO_Init+0xbc>)
 800079e:	f001 f8a1 	bl	80018e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2302      	movs	r3, #2
 80007b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	4619      	mov	r1, r3
 80007ba:	480b      	ldr	r0, [pc, #44]	; (80007e8 <MX_GPIO_Init+0xb8>)
 80007bc:	f000 ff0e 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007c0:	2310      	movs	r3, #16
 80007c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	4619      	mov	r1, r3
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_GPIO_Init+0xbc>)
 80007d8:	f000 ff00 	bl	80015dc <HAL_GPIO_Init>

}
 80007dc:	bf00      	nop
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40011000 	.word	0x40011000
 80007ec:	40010800 	.word	0x40010800

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <Error_Handler+0x8>
	...

080007fc <SPI1SendByte>:
extern void MFRC522_Reset(void);
extern void MFRC522_AntennaOn(void);
extern void MFRC522_AntennaOff(void);
extern void MFRC522_Halt(void);

uint8_t SPI1SendByte(uint8_t data) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af02      	add	r7, sp, #8
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	writeCommand[0] = data;
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 800080a:	f107 0208 	add.w	r2, r7, #8
 800080e:	f107 010c 	add.w	r1, r7, #12
 8000812:	230a      	movs	r3, #10
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	2301      	movs	r3, #1
 8000818:	4803      	ldr	r0, [pc, #12]	; (8000828 <SPI1SendByte+0x2c>)
 800081a:	f001 fd19 	bl	8002250 <HAL_SPI_TransmitReceive>
	return readValue[0];
 800081e:	7a3b      	ldrb	r3, [r7, #8]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2000018c 	.word	0x2000018c

0800082c <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	460a      	mov	r2, r1
 8000836:	71fb      	strb	r3, [r7, #7]
 8000838:	4613      	mov	r3, r2
 800083a:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 800083c:	2200      	movs	r2, #0
 800083e:	2110      	movs	r1, #16
 8000840:	4809      	ldr	r0, [pc, #36]	; (8000868 <SPI1_WriteReg+0x3c>)
 8000842:	f001 f84f 	bl	80018e4 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ffd7 	bl	80007fc <SPI1SendByte>
	SPI1SendByte(value);
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ffd3 	bl	80007fc <SPI1SendByte>
	cs_set();
 8000856:	2201      	movs	r2, #1
 8000858:	2110      	movs	r1, #16
 800085a:	4803      	ldr	r0, [pc, #12]	; (8000868 <SPI1_WriteReg+0x3c>)
 800085c:	f001 f842 	bl	80018e4 <HAL_GPIO_WritePin>
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40010800 	.word	0x40010800

0800086c <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8000876:	2200      	movs	r2, #0
 8000878:	2110      	movs	r1, #16
 800087a:	480b      	ldr	r0, [pc, #44]	; (80008a8 <SPI1_ReadReg+0x3c>)
 800087c:	f001 f832 	bl	80018e4 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ffba 	bl	80007fc <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff ffb7 	bl	80007fc <SPI1SendByte>
 800088e:	4603      	mov	r3, r0
 8000890:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8000892:	2201      	movs	r2, #1
 8000894:	2110      	movs	r1, #16
 8000896:	4804      	ldr	r0, [pc, #16]	; (80008a8 <SPI1_ReadReg+0x3c>)
 8000898:	f001 f824 	bl	80018e4 <HAL_GPIO_WritePin>
	return val;
 800089c:	7bfb      	ldrb	r3, [r7, #15]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40010800 	.word	0x40010800

080008ac <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	460a      	mov	r2, r1
 80008b6:	71fb      	strb	r3, [r7, #7]
 80008b8:	4613      	mov	r3, r2
 80008ba:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80008c6:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 80008c8:	79ba      	ldrb	r2, [r7, #6]
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	4611      	mov	r1, r2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ffac 	bl	800082c <SPI1_WriteReg>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	b25b      	sxtb	r3, r3
 80008ec:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80008f0:	b25b      	sxtb	r3, r3
 80008f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008f6:	b25b      	sxtb	r3, r3
 80008f8:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ffb5 	bl	800086c <SPI1_ReadReg>
 8000902:	4603      	mov	r3, r0
 8000904:	73fb      	strb	r3, [r7, #15]
	return val;	
 8000906:	7bfb      	ldrb	r3, [r7, #15]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	460a      	mov	r2, r1
 800091a:	71fb      	strb	r3, [r7, #7]
 800091c:	4613      	mov	r3, r2
 800091e:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff ffda 	bl	80008dc <MFRC522_ReadRegister>
 8000928:	4603      	mov	r3, r0
 800092a:	461a      	mov	r2, r3
 800092c:	79bb      	ldrb	r3, [r7, #6]
 800092e:	4313      	orrs	r3, r2
 8000930:	b2da      	uxtb	r2, r3
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ffb8 	bl	80008ac <MFRC522_WriteRegister>
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	460a      	mov	r2, r1
 800094e:	71fb      	strb	r3, [r7, #7]
 8000950:	4613      	mov	r3, r2
 8000952:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff ffc0 	bl	80008dc <MFRC522_ReadRegister>
 800095c:	4603      	mov	r3, r0
 800095e:	b25a      	sxtb	r2, r3
 8000960:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000964:	43db      	mvns	r3, r3
 8000966:	b25b      	sxtb	r3, r3
 8000968:	4013      	ands	r3, r2
 800096a:	b25b      	sxtb	r3, r3
 800096c:	b2da      	uxtb	r2, r3
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff ff9a 	bl	80008ac <MFRC522_WriteRegister>
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af02      	add	r7, sp, #8
 8000986:	4603      	mov	r3, r0
 8000988:	6039      	str	r1, [r7, #0]
 800098a:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 800098c:	2107      	movs	r1, #7
 800098e:	200d      	movs	r0, #13
 8000990:	f7ff ff8c 	bl	80008ac <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	79fa      	ldrb	r2, [r7, #7]
 8000998:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	2201      	movs	r2, #1
 80009a4:	6839      	ldr	r1, [r7, #0]
 80009a6:	200c      	movs	r0, #12
 80009a8:	f000 f80f 	bl	80009ca <MFRC522_ToCard>
 80009ac:	4603      	mov	r3, r0
 80009ae:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d102      	bne.n	80009bc <MFRC522_Request+0x3c>
 80009b6:	89bb      	ldrh	r3, [r7, #12]
 80009b8:	2b10      	cmp	r3, #16
 80009ba:	d001      	beq.n	80009c0 <MFRC522_Request+0x40>
 80009bc:	2302      	movs	r3, #2
 80009be:	73fb      	strb	r3, [r7, #15]
	return status;
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 80009ca:	b590      	push	{r4, r7, lr}
 80009cc:	b087      	sub	sp, #28
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	4603      	mov	r3, r0
 80009d6:	73fb      	strb	r3, [r7, #15]
 80009d8:	4613      	mov	r3, r2
 80009da:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 80009dc:	2302      	movs	r3, #2
 80009de:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 80009e0:	2300      	movs	r3, #0
 80009e2:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 80009e4:	2300      	movs	r3, #0
 80009e6:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	2b0c      	cmp	r3, #12
 80009ec:	d006      	beq.n	80009fc <MFRC522_ToCard+0x32>
 80009ee:	2b0e      	cmp	r3, #14
 80009f0:	d109      	bne.n	8000a06 <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 80009f2:	2312      	movs	r3, #18
 80009f4:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 80009f6:	2310      	movs	r3, #16
 80009f8:	757b      	strb	r3, [r7, #21]
			break;
 80009fa:	e005      	b.n	8000a08 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 80009fc:	2377      	movs	r3, #119	; 0x77
 80009fe:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8000a00:	2330      	movs	r3, #48	; 0x30
 8000a02:	757b      	strb	r3, [r7, #21]
			break;
 8000a04:	e000      	b.n	8000a08 <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 8000a06:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8000a08:	7dbb      	ldrb	r3, [r7, #22]
 8000a0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	4619      	mov	r1, r3
 8000a12:	2002      	movs	r0, #2
 8000a14:	f7ff ff4a 	bl	80008ac <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8000a18:	2180      	movs	r1, #128	; 0x80
 8000a1a:	2004      	movs	r0, #4
 8000a1c:	f7ff ff92 	bl	8000944 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	200a      	movs	r0, #10
 8000a24:	f7ff ff74 	bl	8000910 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f7ff ff3e 	bl	80008ac <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8000a30:	2300      	movs	r3, #0
 8000a32:	827b      	strh	r3, [r7, #18]
 8000a34:	e00a      	b.n	8000a4c <MFRC522_ToCard+0x82>
 8000a36:	8a7b      	ldrh	r3, [r7, #18]
 8000a38:	68ba      	ldr	r2, [r7, #8]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	4619      	mov	r1, r3
 8000a40:	2009      	movs	r0, #9
 8000a42:	f7ff ff33 	bl	80008ac <MFRC522_WriteRegister>
 8000a46:	8a7b      	ldrh	r3, [r7, #18]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	827b      	strh	r3, [r7, #18]
 8000a4c:	7bbb      	ldrb	r3, [r7, #14]
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	8a7a      	ldrh	r2, [r7, #18]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d3ef      	bcc.n	8000a36 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f7ff ff26 	bl	80008ac <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	2b0c      	cmp	r3, #12
 8000a64:	d103      	bne.n	8000a6e <MFRC522_ToCard+0xa4>
 8000a66:	2180      	movs	r1, #128	; 0x80
 8000a68:	200d      	movs	r0, #13
 8000a6a:	f7ff ff51 	bl	8000910 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000a6e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a72:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8000a74:	2004      	movs	r0, #4
 8000a76:	f7ff ff31 	bl	80008dc <MFRC522_ReadRegister>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	753b      	strb	r3, [r7, #20]
		i--;
 8000a7e:	8a7b      	ldrh	r3, [r7, #18]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000a84:	8a7b      	ldrh	r3, [r7, #18]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d00a      	beq.n	8000aa0 <MFRC522_ToCard+0xd6>
 8000a8a:	7d3b      	ldrb	r3, [r7, #20]
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d105      	bne.n	8000aa0 <MFRC522_ToCard+0xd6>
 8000a94:	7d3a      	ldrb	r2, [r7, #20]
 8000a96:	7d7b      	ldrb	r3, [r7, #21]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0e9      	beq.n	8000a74 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8000aa0:	2180      	movs	r1, #128	; 0x80
 8000aa2:	200d      	movs	r0, #13
 8000aa4:	f7ff ff4e 	bl	8000944 <MFRC522_ClearBitMask>

	if (i != 0)  {
 8000aa8:	8a7b      	ldrh	r3, [r7, #18]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d057      	beq.n	8000b5e <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8000aae:	2006      	movs	r0, #6
 8000ab0:	f7ff ff14 	bl	80008dc <MFRC522_ReadRegister>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	f003 031b 	and.w	r3, r3, #27
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d14d      	bne.n	8000b5a <MFRC522_ToCard+0x190>
			status = MI_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8000ac2:	7d3a      	ldrb	r2, [r7, #20]
 8000ac4:	7dbb      	ldrb	r3, [r7, #22]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MFRC522_ToCard+0x10c>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	2b0c      	cmp	r3, #12
 8000ada:	d140      	bne.n	8000b5e <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8000adc:	200a      	movs	r0, #10
 8000ade:	f7ff fefd 	bl	80008dc <MFRC522_ReadRegister>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8000ae6:	200c      	movs	r0, #12
 8000ae8:	f7ff fef8 	bl	80008dc <MFRC522_ReadRegister>
 8000aec:	4603      	mov	r3, r0
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8000af4:	7c7b      	ldrb	r3, [r7, #17]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d00b      	beq.n	8000b12 <MFRC522_ToCard+0x148>
 8000afa:	7d3b      	ldrb	r3, [r7, #20]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	7c7b      	ldrb	r3, [r7, #17]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	4413      	add	r3, r2
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b0e:	801a      	strh	r2, [r3, #0]
 8000b10:	e005      	b.n	8000b1e <MFRC522_ToCard+0x154>
 8000b12:	7d3b      	ldrb	r3, [r7, #20]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1c:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8000b1e:	7d3b      	ldrb	r3, [r7, #20]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d101      	bne.n	8000b28 <MFRC522_ToCard+0x15e>
 8000b24:	2301      	movs	r3, #1
 8000b26:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8000b28:	7d3b      	ldrb	r3, [r7, #20]
 8000b2a:	2b10      	cmp	r3, #16
 8000b2c:	d901      	bls.n	8000b32 <MFRC522_ToCard+0x168>
 8000b2e:	2310      	movs	r3, #16
 8000b30:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8000b32:	2300      	movs	r3, #0
 8000b34:	827b      	strh	r3, [r7, #18]
 8000b36:	e00a      	b.n	8000b4e <MFRC522_ToCard+0x184>
 8000b38:	8a7b      	ldrh	r3, [r7, #18]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	18d4      	adds	r4, r2, r3
 8000b3e:	2009      	movs	r0, #9
 8000b40:	f7ff fecc 	bl	80008dc <MFRC522_ReadRegister>
 8000b44:	4603      	mov	r3, r0
 8000b46:	7023      	strb	r3, [r4, #0]
 8000b48:	8a7b      	ldrh	r3, [r7, #18]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	827b      	strh	r3, [r7, #18]
 8000b4e:	7d3b      	ldrb	r3, [r7, #20]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	8a7a      	ldrh	r2, [r7, #18]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d3ef      	bcc.n	8000b38 <MFRC522_ToCard+0x16e>
 8000b58:	e001      	b.n	8000b5e <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8000b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	371c      	adds	r7, #28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd90      	pop	{r4, r7, pc}

08000b68 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af02      	add	r7, sp, #8
 8000b6e:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8000b74:	2100      	movs	r1, #0
 8000b76:	200d      	movs	r0, #13
 8000b78:	f7ff fe98 	bl	80008ac <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2293      	movs	r2, #147	; 0x93
 8000b80:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3301      	adds	r3, #1
 8000b86:	2220      	movs	r2, #32
 8000b88:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000b8a:	f107 030a 	add.w	r3, r7, #10
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2202      	movs	r2, #2
 8000b94:	6879      	ldr	r1, [r7, #4]
 8000b96:	200c      	movs	r0, #12
 8000b98:	f7ff ff17 	bl	80009ca <MFRC522_ToCard>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d118      	bne.n	8000bd8 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	73bb      	strb	r3, [r7, #14]
 8000baa:	e009      	b.n	8000bc0 <MFRC522_Anticoll+0x58>
 8000bac:	7bbb      	ldrb	r3, [r7, #14]
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	781a      	ldrb	r2, [r3, #0]
 8000bb4:	7b7b      	ldrb	r3, [r7, #13]
 8000bb6:	4053      	eors	r3, r2
 8000bb8:	737b      	strb	r3, [r7, #13]
 8000bba:	7bbb      	ldrb	r3, [r7, #14]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	73bb      	strb	r3, [r7, #14]
 8000bc0:	7bbb      	ldrb	r3, [r7, #14]
 8000bc2:	2b03      	cmp	r3, #3
 8000bc4:	d9f2      	bls.n	8000bac <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8000bc6:	7bbb      	ldrb	r3, [r7, #14]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	4413      	add	r3, r2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	7b7a      	ldrb	r2, [r7, #13]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d001      	beq.n	8000bd8 <MFRC522_Anticoll+0x70>
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
} 
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8000be2:	b590      	push	{r4, r7, lr}
 8000be4:	b087      	sub	sp, #28
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	60f8      	str	r0, [r7, #12]
 8000bea:	460b      	mov	r3, r1
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	2005      	movs	r0, #5
 8000bf4:	f7ff fea6 	bl	8000944 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 8000bf8:	2180      	movs	r1, #128	; 0x80
 8000bfa:	200a      	movs	r0, #10
 8000bfc:	f7ff fe88 	bl	8000910 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8000c00:	2300      	movs	r3, #0
 8000c02:	75fb      	strb	r3, [r7, #23]
 8000c04:	e00a      	b.n	8000c1c <MFRC522_CalculateCRC+0x3a>
 8000c06:	7dfb      	ldrb	r3, [r7, #23]
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	2009      	movs	r0, #9
 8000c12:	f7ff fe4b 	bl	80008ac <MFRC522_WriteRegister>
 8000c16:	7dfb      	ldrb	r3, [r7, #23]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	75fb      	strb	r3, [r7, #23]
 8000c1c:	7dfa      	ldrb	r2, [r7, #23]
 8000c1e:	7afb      	ldrb	r3, [r7, #11]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d3f0      	bcc.n	8000c06 <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8000c24:	2103      	movs	r1, #3
 8000c26:	2001      	movs	r0, #1
 8000c28:	f7ff fe40 	bl	80008ac <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 8000c2c:	23ff      	movs	r3, #255	; 0xff
 8000c2e:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8000c30:	2005      	movs	r0, #5
 8000c32:	f7ff fe53 	bl	80008dc <MFRC522_ReadRegister>
 8000c36:	4603      	mov	r3, r0
 8000c38:	75bb      	strb	r3, [r7, #22]
		i--;
 8000c3a:	7dfb      	ldrb	r3, [r7, #23]
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 8000c40:	7dfb      	ldrb	r3, [r7, #23]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d004      	beq.n	8000c50 <MFRC522_CalculateCRC+0x6e>
 8000c46:	7dbb      	ldrb	r3, [r7, #22]
 8000c48:	f003 0304 	and.w	r3, r3, #4
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d0ef      	beq.n	8000c30 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8000c50:	2022      	movs	r0, #34	; 0x22
 8000c52:	f7ff fe43 	bl	80008dc <MFRC522_ReadRegister>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	1c5c      	adds	r4, r3, #1
 8000c62:	2021      	movs	r0, #33	; 0x21
 8000c64:	f7ff fe3a 	bl	80008dc <MFRC522_ReadRegister>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	7023      	strb	r3, [r4, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	371c      	adds	r7, #28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd90      	pop	{r4, r7, pc}

08000c74 <MFRC522_SelectTag>:

uint8_t MFRC522_SelectTag(uint8_t* serNum) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af02      	add	r7, sp, #8
 8000c7a:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t size;
	uint16_t recvBits;
	uint8_t buffer[9]; 

	buffer[0] = PICC_SElECTTAG;
 8000c7c:	2393      	movs	r3, #147	; 0x93
 8000c7e:	723b      	strb	r3, [r7, #8]
	buffer[1] = 0x70;
 8000c80:	2370      	movs	r3, #112	; 0x70
 8000c82:	727b      	strb	r3, [r7, #9]
	for (i = 0; i < 5; i++) buffer[i+2] = *(serNum+i);
 8000c84:	2300      	movs	r3, #0
 8000c86:	75fb      	strb	r3, [r7, #23]
 8000c88:	e00c      	b.n	8000ca4 <MFRC522_SelectTag+0x30>
 8000c8a:	7dfb      	ldrb	r3, [r7, #23]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	441a      	add	r2, r3
 8000c90:	7dfb      	ldrb	r3, [r7, #23]
 8000c92:	3302      	adds	r3, #2
 8000c94:	7812      	ldrb	r2, [r2, #0]
 8000c96:	3318      	adds	r3, #24
 8000c98:	443b      	add	r3, r7
 8000c9a:	f803 2c10 	strb.w	r2, [r3, #-16]
 8000c9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	75fb      	strb	r3, [r7, #23]
 8000ca4:	7dfb      	ldrb	r3, [r7, #23]
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	d9ef      	bls.n	8000c8a <MFRC522_SelectTag+0x16>
	MFRC522_CalculateCRC(buffer, 7, &buffer[7]);		//??
 8000caa:	f107 0308 	add.w	r3, r7, #8
 8000cae:	1dda      	adds	r2, r3, #7
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	2107      	movs	r1, #7
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff93 	bl	8000be2 <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 8000cbc:	f107 0208 	add.w	r2, r7, #8
 8000cc0:	f107 0108 	add.w	r1, r7, #8
 8000cc4:	f107 0312 	add.w	r3, r7, #18
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	2209      	movs	r2, #9
 8000cce:	200c      	movs	r0, #12
 8000cd0:	f7ff fe7b 	bl	80009ca <MFRC522_ToCard>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	757b      	strb	r3, [r7, #21]
	if ((status == MI_OK) && (recvBits == 0x18)) size = buffer[0]; else size = 0;
 8000cd8:	7d7b      	ldrb	r3, [r7, #21]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d105      	bne.n	8000cea <MFRC522_SelectTag+0x76>
 8000cde:	8a7b      	ldrh	r3, [r7, #18]
 8000ce0:	2b18      	cmp	r3, #24
 8000ce2:	d102      	bne.n	8000cea <MFRC522_SelectTag+0x76>
 8000ce4:	7a3b      	ldrb	r3, [r7, #8]
 8000ce6:	75bb      	strb	r3, [r7, #22]
 8000ce8:	e001      	b.n	8000cee <MFRC522_SelectTag+0x7a>
 8000cea:	2300      	movs	r3, #0
 8000cec:	75bb      	strb	r3, [r7, #22]
	return size;
 8000cee:	7dbb      	ldrb	r3, [r7, #22]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <MFRC522_Auth>:

uint8_t MFRC522_Auth(uint8_t authMode, uint8_t BlockAddr, uint8_t* Sectorkey, uint8_t* serNum) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af02      	add	r7, sp, #8
 8000cfe:	60ba      	str	r2, [r7, #8]
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	4603      	mov	r3, r0
 8000d04:	73fb      	strb	r3, [r7, #15]
 8000d06:	460b      	mov	r3, r1
 8000d08:	73bb      	strb	r3, [r7, #14]
	uint16_t recvBits;
	uint8_t i;
	uint8_t buff[12]; 

	// Verify the command block address + sector + password + card serial number
	buff[0] = authMode;
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	743b      	strb	r3, [r7, #16]
	buff[1] = BlockAddr;
 8000d0e:	7bbb      	ldrb	r3, [r7, #14]
 8000d10:	747b      	strb	r3, [r7, #17]
	for (i = 0; i < 6; i++) buff[i+2] = *(Sectorkey+i);
 8000d12:	2300      	movs	r3, #0
 8000d14:	77bb      	strb	r3, [r7, #30]
 8000d16:	e00c      	b.n	8000d32 <MFRC522_Auth+0x3a>
 8000d18:	7fbb      	ldrb	r3, [r7, #30]
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	441a      	add	r2, r3
 8000d1e:	7fbb      	ldrb	r3, [r7, #30]
 8000d20:	3302      	adds	r3, #2
 8000d22:	7812      	ldrb	r2, [r2, #0]
 8000d24:	3320      	adds	r3, #32
 8000d26:	443b      	add	r3, r7
 8000d28:	f803 2c10 	strb.w	r2, [r3, #-16]
 8000d2c:	7fbb      	ldrb	r3, [r7, #30]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	77bb      	strb	r3, [r7, #30]
 8000d32:	7fbb      	ldrb	r3, [r7, #30]
 8000d34:	2b05      	cmp	r3, #5
 8000d36:	d9ef      	bls.n	8000d18 <MFRC522_Auth+0x20>
	for (i=0; i<4; i++) buff[i+8] = *(serNum+i);
 8000d38:	2300      	movs	r3, #0
 8000d3a:	77bb      	strb	r3, [r7, #30]
 8000d3c:	e00c      	b.n	8000d58 <MFRC522_Auth+0x60>
 8000d3e:	7fbb      	ldrb	r3, [r7, #30]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	441a      	add	r2, r3
 8000d44:	7fbb      	ldrb	r3, [r7, #30]
 8000d46:	3308      	adds	r3, #8
 8000d48:	7812      	ldrb	r2, [r2, #0]
 8000d4a:	3320      	adds	r3, #32
 8000d4c:	443b      	add	r3, r7
 8000d4e:	f803 2c10 	strb.w	r2, [r3, #-16]
 8000d52:	7fbb      	ldrb	r3, [r7, #30]
 8000d54:	3301      	adds	r3, #1
 8000d56:	77bb      	strb	r3, [r7, #30]
 8000d58:	7fbb      	ldrb	r3, [r7, #30]
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d9ef      	bls.n	8000d3e <MFRC522_Auth+0x46>
	status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 8000d5e:	f107 0210 	add.w	r2, r7, #16
 8000d62:	f107 0110 	add.w	r1, r7, #16
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	220c      	movs	r2, #12
 8000d70:	200e      	movs	r0, #14
 8000d72:	f7ff fe2a 	bl	80009ca <MFRC522_ToCard>
 8000d76:	4603      	mov	r3, r0
 8000d78:	77fb      	strb	r3, [r7, #31]
	if ((status != MI_OK) || (!(MFRC522_ReadRegister(MFRC522_REG_STATUS2) & 0x08))) status = MI_ERR;
 8000d7a:	7ffb      	ldrb	r3, [r7, #31]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d107      	bne.n	8000d90 <MFRC522_Auth+0x98>
 8000d80:	2008      	movs	r0, #8
 8000d82:	f7ff fdab 	bl	80008dc <MFRC522_ReadRegister>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f003 0308 	and.w	r3, r3, #8
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d101      	bne.n	8000d94 <MFRC522_Auth+0x9c>
 8000d90:	2302      	movs	r3, #2
 8000d92:	77fb      	strb	r3, [r7, #31]
	return status;
 8000d94:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3720      	adds	r7, #32
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <MFRC522_Read>:

uint8_t MFRC522_Read(uint8_t blockAddr, uint8_t* recvData) {
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af02      	add	r7, sp, #8
 8000da4:	4603      	mov	r3, r0
 8000da6:	6039      	str	r1, [r7, #0]
 8000da8:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t unLen;

	recvData[0] = PICC_READ;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	2230      	movs	r2, #48	; 0x30
 8000dae:	701a      	strb	r2, [r3, #0]
	recvData[1] = blockAddr;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	79fa      	ldrb	r2, [r7, #7]
 8000db6:	701a      	strb	r2, [r3, #0]
	MFRC522_CalculateCRC(recvData,2, &recvData[2]);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	3302      	adds	r3, #2
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	2102      	movs	r1, #2
 8000dc0:	6838      	ldr	r0, [r7, #0]
 8000dc2:	f7ff ff0e 	bl	8000be2 <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	2204      	movs	r2, #4
 8000dd0:	6839      	ldr	r1, [r7, #0]
 8000dd2:	200c      	movs	r0, #12
 8000dd4:	f7ff fdf9 	bl	80009ca <MFRC522_ToCard>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (unLen != 0x90)) status = MI_ERR;
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d102      	bne.n	8000de8 <MFRC522_Read+0x4a>
 8000de2:	89bb      	ldrh	r3, [r7, #12]
 8000de4:	2b90      	cmp	r3, #144	; 0x90
 8000de6:	d001      	beq.n	8000dec <MFRC522_Read+0x4e>
 8000de8:	2302      	movs	r3, #2
 8000dea:	73fb      	strb	r3, [r7, #15]
	return status;
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <MFRC522_Write>:

uint8_t MFRC522_Write(uint8_t blockAddr, uint8_t* writeData) {
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b08a      	sub	sp, #40	; 0x28
 8000dfa:	af02      	add	r7, sp, #8
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	6039      	str	r1, [r7, #0]
 8000e00:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t recvBits;
	uint8_t i;
	uint8_t buff[18]; 

	buff[0] = PICC_WRITE;
 8000e02:	23a0      	movs	r3, #160	; 0xa0
 8000e04:	723b      	strb	r3, [r7, #8]
	buff[1] = blockAddr;
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	727b      	strb	r3, [r7, #9]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	1c9a      	adds	r2, r3, #2
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	2102      	movs	r1, #2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fee3 	bl	8000be2 <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &recvBits);
 8000e1c:	f107 0208 	add.w	r2, r7, #8
 8000e20:	f107 0108 	add.w	r1, r7, #8
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	2204      	movs	r2, #4
 8000e2e:	200c      	movs	r0, #12
 8000e30:	f7ff fdcb 	bl	80009ca <MFRC522_ToCard>
 8000e34:	4603      	mov	r3, r0
 8000e36:	77fb      	strb	r3, [r7, #31]
	if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
 8000e38:	7ffb      	ldrb	r3, [r7, #31]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d107      	bne.n	8000e4e <MFRC522_Write+0x58>
 8000e3e:	8bbb      	ldrh	r3, [r7, #28]
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d104      	bne.n	8000e4e <MFRC522_Write+0x58>
 8000e44:	7a3b      	ldrb	r3, [r7, #8]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	2b0a      	cmp	r3, #10
 8000e4c:	d001      	beq.n	8000e52 <MFRC522_Write+0x5c>
 8000e4e:	2302      	movs	r3, #2
 8000e50:	77fb      	strb	r3, [r7, #31]
	if (status == MI_OK) {
 8000e52:	7ffb      	ldrb	r3, [r7, #31]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d136      	bne.n	8000ec6 <MFRC522_Write+0xd0>
		// Data to the FIFO write 16Byte
		for (i = 0; i < 16; i++) buff[i] = *(writeData+i);
 8000e58:	2300      	movs	r3, #0
 8000e5a:	77bb      	strb	r3, [r7, #30]
 8000e5c:	e00b      	b.n	8000e76 <MFRC522_Write+0x80>
 8000e5e:	7fbb      	ldrb	r3, [r7, #30]
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	441a      	add	r2, r3
 8000e64:	7fbb      	ldrb	r3, [r7, #30]
 8000e66:	7812      	ldrb	r2, [r2, #0]
 8000e68:	3320      	adds	r3, #32
 8000e6a:	443b      	add	r3, r7
 8000e6c:	f803 2c18 	strb.w	r2, [r3, #-24]
 8000e70:	7fbb      	ldrb	r3, [r7, #30]
 8000e72:	3301      	adds	r3, #1
 8000e74:	77bb      	strb	r3, [r7, #30]
 8000e76:	7fbb      	ldrb	r3, [r7, #30]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d9f0      	bls.n	8000e5e <MFRC522_Write+0x68>
		MFRC522_CalculateCRC(buff, 16, &buff[16]);
 8000e7c:	f107 0308 	add.w	r3, r7, #8
 8000e80:	f103 0210 	add.w	r2, r3, #16
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	2110      	movs	r1, #16
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fea9 	bl	8000be2 <MFRC522_CalculateCRC>
		status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 18, buff, &recvBits);
 8000e90:	f107 0208 	add.w	r2, r7, #8
 8000e94:	f107 0108 	add.w	r1, r7, #8
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	2212      	movs	r2, #18
 8000ea2:	200c      	movs	r0, #12
 8000ea4:	f7ff fd91 	bl	80009ca <MFRC522_ToCard>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	77fb      	strb	r3, [r7, #31]
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
 8000eac:	7ffb      	ldrb	r3, [r7, #31]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d107      	bne.n	8000ec2 <MFRC522_Write+0xcc>
 8000eb2:	8bbb      	ldrh	r3, [r7, #28]
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d104      	bne.n	8000ec2 <MFRC522_Write+0xcc>
 8000eb8:	7a3b      	ldrb	r3, [r7, #8]
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	2b0a      	cmp	r3, #10
 8000ec0:	d001      	beq.n	8000ec6 <MFRC522_Write+0xd0>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	77fb      	strb	r3, [r7, #31]
	}
	return status;
 8000ec6:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <MFRC522_Init>:

void MFRC522_Init(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8000ed4:	f000 f820 	bl	8000f18 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8000ed8:	218d      	movs	r1, #141	; 0x8d
 8000eda:	202a      	movs	r0, #42	; 0x2a
 8000edc:	f7ff fce6 	bl	80008ac <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8000ee0:	213e      	movs	r1, #62	; 0x3e
 8000ee2:	202b      	movs	r0, #43	; 0x2b
 8000ee4:	f7ff fce2 	bl	80008ac <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8000ee8:	211e      	movs	r1, #30
 8000eea:	202d      	movs	r0, #45	; 0x2d
 8000eec:	f7ff fcde 	bl	80008ac <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	202c      	movs	r0, #44	; 0x2c
 8000ef4:	f7ff fcda 	bl	80008ac <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 8000ef8:	2170      	movs	r1, #112	; 0x70
 8000efa:	2026      	movs	r0, #38	; 0x26
 8000efc:	f7ff fcd6 	bl	80008ac <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8000f00:	2140      	movs	r1, #64	; 0x40
 8000f02:	2015      	movs	r0, #21
 8000f04:	f7ff fcd2 	bl	80008ac <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8000f08:	213d      	movs	r1, #61	; 0x3d
 8000f0a:	2011      	movs	r0, #17
 8000f0c:	f7ff fcce 	bl	80008ac <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 8000f10:	f000 f80a 	bl	8000f28 <MFRC522_AntennaOn>
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8000f1c:	210f      	movs	r1, #15
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f7ff fcc4 	bl	80008ac <MFRC522_WriteRegister>
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8000f2e:	2014      	movs	r0, #20
 8000f30:	f7ff fcd4 	bl	80008dc <MFRC522_ReadRegister>
 8000f34:	4603      	mov	r3, r0
 8000f36:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d103      	bne.n	8000f4a <MFRC522_AntennaOn+0x22>
 8000f42:	2103      	movs	r1, #3
 8000f44:	2014      	movs	r0, #20
 8000f46:	f7ff fce3 	bl	8000910 <MFRC522_SetBitMask>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_MspInit+0x5c>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <HAL_MspInit+0x5c>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6193      	str	r3, [r2, #24]
 8000f66:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_MspInit+0x5c>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <HAL_MspInit+0x5c>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <HAL_MspInit+0x5c>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	61d3      	str	r3, [r2, #28]
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <HAL_MspInit+0x5c>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_MspInit+0x60>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_MspInit+0x60>)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40010000 	.word	0x40010000

08000fb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a1b      	ldr	r2, [pc, #108]	; (8001040 <HAL_SPI_MspInit+0x88>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d12f      	bne.n	8001038 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <HAL_SPI_MspInit+0x8c>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a19      	ldr	r2, [pc, #100]	; (8001044 <HAL_SPI_MspInit+0x8c>)
 8000fde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fe2:	6193      	str	r3, [r2, #24]
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <HAL_SPI_MspInit+0x8c>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_SPI_MspInit+0x8c>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a13      	ldr	r2, [pc, #76]	; (8001044 <HAL_SPI_MspInit+0x8c>)
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_SPI_MspInit+0x8c>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001008:	23a0      	movs	r3, #160	; 0xa0
 800100a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4619      	mov	r1, r3
 800101a:	480b      	ldr	r0, [pc, #44]	; (8001048 <HAL_SPI_MspInit+0x90>)
 800101c:	f000 fade 	bl	80015dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001020:	2340      	movs	r3, #64	; 0x40
 8001022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	4619      	mov	r1, r3
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <HAL_SPI_MspInit+0x90>)
 8001034:	f000 fad2 	bl	80015dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001038:	bf00      	nop
 800103a:	3720      	adds	r7, #32
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40013000 	.word	0x40013000
 8001044:	40021000 	.word	0x40021000
 8001048:	40010800 	.word	0x40010800

0800104c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <HAL_UART_MspInit+0x88>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d12f      	bne.n	80010cc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <HAL_UART_MspInit+0x8c>)
 800106e:	69db      	ldr	r3, [r3, #28]
 8001070:	4a19      	ldr	r2, [pc, #100]	; (80010d8 <HAL_UART_MspInit+0x8c>)
 8001072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001076:	61d3      	str	r3, [r2, #28]
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_UART_MspInit+0x8c>)
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_UART_MspInit+0x8c>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <HAL_UART_MspInit+0x8c>)
 800108a:	f043 0304 	orr.w	r3, r3, #4
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_UART_MspInit+0x8c>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800109c:	2304      	movs	r3, #4
 800109e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	4619      	mov	r1, r3
 80010ae:	480b      	ldr	r0, [pc, #44]	; (80010dc <HAL_UART_MspInit+0x90>)
 80010b0:	f000 fa94 	bl	80015dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010b4:	2308      	movs	r3, #8
 80010b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	4619      	mov	r1, r3
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <HAL_UART_MspInit+0x90>)
 80010c8:	f000 fa88 	bl	80015dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

 }
 80010cc:	bf00      	nop
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40004400 	.word	0x40004400
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010800 	.word	0x40010800

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <NMI_Handler+0x4>

080010e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <HardFault_Handler+0x4>

080010ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <MemManage_Handler+0x4>

080010f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <UsageFault_Handler+0x4>

080010fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr

08001116 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr

08001122 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001126:	f000 f935 	bl	8001394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}

0800112e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  return 1;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <_kill>:

int _kill(int pid, int sig)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001146:	f001 fc83 	bl	8002a50 <__errno>
 800114a:	4603      	mov	r3, r0
 800114c:	2216      	movs	r2, #22
 800114e:	601a      	str	r2, [r3, #0]
  return -1;
 8001150:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <_exit>:

void _exit (int status)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ffe7 	bl	800113c <_kill>
  while (1) {}    /* Make sure we hang here */
 800116e:	e7fe      	b.n	800116e <_exit+0x12>

08001170 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	e00a      	b.n	8001198 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001182:	f3af 8000 	nop.w
 8001186:	4601      	mov	r1, r0
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	60ba      	str	r2, [r7, #8]
 800118e:	b2ca      	uxtb	r2, r1
 8001190:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3301      	adds	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	429a      	cmp	r2, r3
 800119e:	dbf0      	blt.n	8001182 <_read+0x12>
  }

  return len;
 80011a0:	687b      	ldr	r3, [r7, #4]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	e009      	b.n	80011d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1c5a      	adds	r2, r3, #1
 80011c0:	60ba      	str	r2, [r7, #8]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	3301      	adds	r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	dbf1      	blt.n	80011bc <_write+0x12>
  }
  return len;
 80011d8:	687b      	ldr	r3, [r7, #4]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <_close>:

int _close(int file)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001208:	605a      	str	r2, [r3, #4]
  return 0;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr

08001216 <_isatty>:

int _isatty(int file)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800122a:	b480      	push	{r7}
 800122c:	b085      	sub	sp, #20
 800122e:	af00      	add	r7, sp, #0
 8001230:	60f8      	str	r0, [r7, #12]
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
	...

08001244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800124c:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <_sbrk+0x5c>)
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <_sbrk+0x60>)
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <_sbrk+0x64>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <_sbrk+0x64>)
 8001262:	4a12      	ldr	r2, [pc, #72]	; (80012ac <_sbrk+0x68>)
 8001264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <_sbrk+0x64>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	429a      	cmp	r2, r3
 8001272:	d207      	bcs.n	8001284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001274:	f001 fbec 	bl	8002a50 <__errno>
 8001278:	4603      	mov	r3, r0
 800127a:	220c      	movs	r2, #12
 800127c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
 8001282:	e009      	b.n	8001298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <_sbrk+0x64>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <_sbrk+0x64>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <_sbrk+0x64>)
 8001294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001296:	68fb      	ldr	r3, [r7, #12]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20005000 	.word	0x20005000
 80012a4:	00000400 	.word	0x00000400
 80012a8:	20000320 	.word	0x20000320
 80012ac:	20000338 	.word	0x20000338

080012b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012bc:	480c      	ldr	r0, [pc, #48]	; (80012f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012be:	490d      	ldr	r1, [pc, #52]	; (80012f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c4:	e002      	b.n	80012cc <LoopCopyDataInit>

080012c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ca:	3304      	adds	r3, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d0:	d3f9      	bcc.n	80012c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d4:	4c0a      	ldr	r4, [pc, #40]	; (8001300 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d8:	e001      	b.n	80012de <LoopFillZerobss>

080012da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012dc:	3204      	adds	r2, #4

080012de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e0:	d3fb      	bcc.n	80012da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012e2:	f7ff ffe5 	bl	80012b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012e6:	f001 fbb9 	bl	8002a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ea:	f7fe ff87 	bl	80001fc <main>
  bx lr
 80012ee:	4770      	bx	lr
  ldr r0, =_sdata
 80012f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f4:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 80012f8:	08004148 	.word	0x08004148
  ldr r2, =_sbss
 80012fc:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8001300:	20000338 	.word	0x20000338

08001304 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC1_2_IRQHandler>
	...

08001308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_Init+0x28>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a07      	ldr	r2, [pc, #28]	; (8001330 <HAL_Init+0x28>)
 8001312:	f043 0310 	orr.w	r3, r3, #16
 8001316:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001318:	2003      	movs	r0, #3
 800131a:	f000 f92b 	bl	8001574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131e:	200f      	movs	r0, #15
 8001320:	f000 f808 	bl	8001334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001324:	f7ff fe16 	bl	8000f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40022000 	.word	0x40022000

08001334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_InitTick+0x54>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x58>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134a:	fbb3 f3f1 	udiv	r3, r3, r1
 800134e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f935 	bl	80015c2 <HAL_SYSTICK_Config>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e00e      	b.n	8001380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b0f      	cmp	r3, #15
 8001366:	d80a      	bhi.n	800137e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001368:	2200      	movs	r2, #0
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f000 f90b 	bl	800158a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001374:	4a06      	ldr	r2, [pc, #24]	; (8001390 <HAL_InitTick+0x5c>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	e000      	b.n	8001380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000100 	.word	0x20000100
 800138c:	20000108 	.word	0x20000108
 8001390:	20000104 	.word	0x20000104

08001394 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_IncTick+0x1c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_IncTick+0x20>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	4a03      	ldr	r2, [pc, #12]	; (80013b4 <HAL_IncTick+0x20>)
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	20000108 	.word	0x20000108
 80013b4:	20000324 	.word	0x20000324

080013b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;
 80013bc:	4b02      	ldr	r3, [pc, #8]	; (80013c8 <HAL_GetTick+0x10>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	20000324 	.word	0x20000324

080013cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d4:	f7ff fff0 	bl	80013b8 <HAL_GetTick>
 80013d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e4:	d005      	beq.n	80013f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_Delay+0x44>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4413      	add	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013f2:	bf00      	nop
 80013f4:	f7ff ffe0 	bl	80013b8 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	d8f7      	bhi.n	80013f4 <HAL_Delay+0x28>
  {
  }
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000108 	.word	0x20000108

08001414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800143c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	6039      	str	r1, [r7, #0]
 8001482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	2b00      	cmp	r3, #0
 800148a:	db0a      	blt.n	80014a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	b2da      	uxtb	r2, r3
 8001490:	490c      	ldr	r1, [pc, #48]	; (80014c4 <__NVIC_SetPriority+0x4c>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	0112      	lsls	r2, r2, #4
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	440b      	add	r3, r1
 800149c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a0:	e00a      	b.n	80014b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4908      	ldr	r1, [pc, #32]	; (80014c8 <__NVIC_SetPriority+0x50>)
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	3b04      	subs	r3, #4
 80014b0:	0112      	lsls	r2, r2, #4
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	440b      	add	r3, r1
 80014b6:	761a      	strb	r2, [r3, #24]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000e100 	.word	0xe000e100
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b089      	sub	sp, #36	; 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f1c3 0307 	rsb	r3, r3, #7
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	bf28      	it	cs
 80014ea:	2304      	movcs	r3, #4
 80014ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3304      	adds	r3, #4
 80014f2:	2b06      	cmp	r3, #6
 80014f4:	d902      	bls.n	80014fc <NVIC_EncodePriority+0x30>
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3b03      	subs	r3, #3
 80014fa:	e000      	b.n	80014fe <NVIC_EncodePriority+0x32>
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	f04f 32ff 	mov.w	r2, #4294967295
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	401a      	ands	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001514:	f04f 31ff 	mov.w	r1, #4294967295
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	43d9      	mvns	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	4313      	orrs	r3, r2
         );
}
 8001526:	4618      	mov	r0, r3
 8001528:	3724      	adds	r7, #36	; 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001540:	d301      	bcc.n	8001546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001542:	2301      	movs	r3, #1
 8001544:	e00f      	b.n	8001566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <SysTick_Config+0x40>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154e:	210f      	movs	r1, #15
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f7ff ff90 	bl	8001478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <SysTick_Config+0x40>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <SysTick_Config+0x40>)
 8001560:	2207      	movs	r2, #7
 8001562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	e000e010 	.word	0xe000e010

08001574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ff49 	bl	8001414 <__NVIC_SetPriorityGrouping>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800159c:	f7ff ff5e 	bl	800145c <__NVIC_GetPriorityGrouping>
 80015a0:	6178      	str	r0, [r7, #20]
  
  	NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	6978      	ldr	r0, [r7, #20]
 80015a8:	f7ff ff90 	bl	80014cc <NVIC_EncodePriority>
 80015ac:	4602      	mov	r2, r0
 80015ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff5f 	bl	8001478 <__NVIC_SetPriority>
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ffb0 	bl	8001530 <SysTick_Config>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015dc:	b480      	push	{r7}
 80015de:	b08b      	sub	sp, #44	; 0x2c
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ee:	e169      	b.n	80018c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015f0:	2201      	movs	r2, #1
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	429a      	cmp	r2, r3
 800160a:	f040 8158 	bne.w	80018be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4a9a      	ldr	r2, [pc, #616]	; (800187c <HAL_GPIO_Init+0x2a0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d05e      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
 8001618:	4a98      	ldr	r2, [pc, #608]	; (800187c <HAL_GPIO_Init+0x2a0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d875      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 800161e:	4a98      	ldr	r2, [pc, #608]	; (8001880 <HAL_GPIO_Init+0x2a4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d058      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
 8001624:	4a96      	ldr	r2, [pc, #600]	; (8001880 <HAL_GPIO_Init+0x2a4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d86f      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 800162a:	4a96      	ldr	r2, [pc, #600]	; (8001884 <HAL_GPIO_Init+0x2a8>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d052      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
 8001630:	4a94      	ldr	r2, [pc, #592]	; (8001884 <HAL_GPIO_Init+0x2a8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d869      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 8001636:	4a94      	ldr	r2, [pc, #592]	; (8001888 <HAL_GPIO_Init+0x2ac>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d04c      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
 800163c:	4a92      	ldr	r2, [pc, #584]	; (8001888 <HAL_GPIO_Init+0x2ac>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d863      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 8001642:	4a92      	ldr	r2, [pc, #584]	; (800188c <HAL_GPIO_Init+0x2b0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d046      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
 8001648:	4a90      	ldr	r2, [pc, #576]	; (800188c <HAL_GPIO_Init+0x2b0>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d85d      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 800164e:	2b12      	cmp	r3, #18
 8001650:	d82a      	bhi.n	80016a8 <HAL_GPIO_Init+0xcc>
 8001652:	2b12      	cmp	r3, #18
 8001654:	d859      	bhi.n	800170a <HAL_GPIO_Init+0x12e>
 8001656:	a201      	add	r2, pc, #4	; (adr r2, 800165c <HAL_GPIO_Init+0x80>)
 8001658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165c:	080016d7 	.word	0x080016d7
 8001660:	080016b1 	.word	0x080016b1
 8001664:	080016c3 	.word	0x080016c3
 8001668:	08001705 	.word	0x08001705
 800166c:	0800170b 	.word	0x0800170b
 8001670:	0800170b 	.word	0x0800170b
 8001674:	0800170b 	.word	0x0800170b
 8001678:	0800170b 	.word	0x0800170b
 800167c:	0800170b 	.word	0x0800170b
 8001680:	0800170b 	.word	0x0800170b
 8001684:	0800170b 	.word	0x0800170b
 8001688:	0800170b 	.word	0x0800170b
 800168c:	0800170b 	.word	0x0800170b
 8001690:	0800170b 	.word	0x0800170b
 8001694:	0800170b 	.word	0x0800170b
 8001698:	0800170b 	.word	0x0800170b
 800169c:	0800170b 	.word	0x0800170b
 80016a0:	080016b9 	.word	0x080016b9
 80016a4:	080016cd 	.word	0x080016cd
 80016a8:	4a79      	ldr	r2, [pc, #484]	; (8001890 <HAL_GPIO_Init+0x2b4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d013      	beq.n	80016d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016ae:	e02c      	b.n	800170a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	623b      	str	r3, [r7, #32]
          break;
 80016b6:	e029      	b.n	800170c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	3304      	adds	r3, #4
 80016be:	623b      	str	r3, [r7, #32]
          break;
 80016c0:	e024      	b.n	800170c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	3308      	adds	r3, #8
 80016c8:	623b      	str	r3, [r7, #32]
          break;
 80016ca:	e01f      	b.n	800170c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	330c      	adds	r3, #12
 80016d2:	623b      	str	r3, [r7, #32]
          break;
 80016d4:	e01a      	b.n	800170c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d102      	bne.n	80016e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016de:	2304      	movs	r3, #4
 80016e0:	623b      	str	r3, [r7, #32]
          break;
 80016e2:	e013      	b.n	800170c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d105      	bne.n	80016f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016ec:	2308      	movs	r3, #8
 80016ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	611a      	str	r2, [r3, #16]
          break;
 80016f6:	e009      	b.n	800170c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016f8:	2308      	movs	r3, #8
 80016fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	615a      	str	r2, [r3, #20]
          break;
 8001702:	e003      	b.n	800170c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
          break;
 8001708:	e000      	b.n	800170c <HAL_GPIO_Init+0x130>
          break;
 800170a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	2bff      	cmp	r3, #255	; 0xff
 8001710:	d801      	bhi.n	8001716 <HAL_GPIO_Init+0x13a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	e001      	b.n	800171a <HAL_GPIO_Init+0x13e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3304      	adds	r3, #4
 800171a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	2bff      	cmp	r3, #255	; 0xff
 8001720:	d802      	bhi.n	8001728 <HAL_GPIO_Init+0x14c>
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	e002      	b.n	800172e <HAL_GPIO_Init+0x152>
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	3b08      	subs	r3, #8
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	210f      	movs	r1, #15
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	401a      	ands	r2, r3
 8001740:	6a39      	ldr	r1, [r7, #32]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	fa01 f303 	lsl.w	r3, r1, r3
 8001748:	431a      	orrs	r2, r3
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 80b1 	beq.w	80018be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800175c:	4b4d      	ldr	r3, [pc, #308]	; (8001894 <HAL_GPIO_Init+0x2b8>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	4a4c      	ldr	r2, [pc, #304]	; (8001894 <HAL_GPIO_Init+0x2b8>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6193      	str	r3, [r2, #24]
 8001768:	4b4a      	ldr	r3, [pc, #296]	; (8001894 <HAL_GPIO_Init+0x2b8>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001774:	4a48      	ldr	r2, [pc, #288]	; (8001898 <HAL_GPIO_Init+0x2bc>)
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	089b      	lsrs	r3, r3, #2
 800177a:	3302      	adds	r3, #2
 800177c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001780:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	220f      	movs	r2, #15
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	4013      	ands	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a40      	ldr	r2, [pc, #256]	; (800189c <HAL_GPIO_Init+0x2c0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d013      	beq.n	80017c8 <HAL_GPIO_Init+0x1ec>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a3f      	ldr	r2, [pc, #252]	; (80018a0 <HAL_GPIO_Init+0x2c4>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d00d      	beq.n	80017c4 <HAL_GPIO_Init+0x1e8>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a3e      	ldr	r2, [pc, #248]	; (80018a4 <HAL_GPIO_Init+0x2c8>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d007      	beq.n	80017c0 <HAL_GPIO_Init+0x1e4>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a3d      	ldr	r2, [pc, #244]	; (80018a8 <HAL_GPIO_Init+0x2cc>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d101      	bne.n	80017bc <HAL_GPIO_Init+0x1e0>
 80017b8:	2303      	movs	r3, #3
 80017ba:	e006      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017bc:	2304      	movs	r3, #4
 80017be:	e004      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e002      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <HAL_GPIO_Init+0x1ee>
 80017c8:	2300      	movs	r3, #0
 80017ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017cc:	f002 0203 	and.w	r2, r2, #3
 80017d0:	0092      	lsls	r2, r2, #2
 80017d2:	4093      	lsls	r3, r2
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017da:	492f      	ldr	r1, [pc, #188]	; (8001898 <HAL_GPIO_Init+0x2bc>)
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	3302      	adds	r3, #2
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d006      	beq.n	8001802 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017f4:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	492c      	ldr	r1, [pc, #176]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	600b      	str	r3, [r1, #0]
 8001800:	e006      	b.n	8001810 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001802:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	43db      	mvns	r3, r3
 800180a:	4928      	ldr	r1, [pc, #160]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 800180c:	4013      	ands	r3, r2
 800180e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800181c:	4b23      	ldr	r3, [pc, #140]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	4922      	ldr	r1, [pc, #136]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	43db      	mvns	r3, r3
 8001832:	491e      	ldr	r1, [pc, #120]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 8001834:	4013      	ands	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d006      	beq.n	8001852 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	4918      	ldr	r1, [pc, #96]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	608b      	str	r3, [r1, #8]
 8001850:	e006      	b.n	8001860 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	43db      	mvns	r3, r3
 800185a:	4914      	ldr	r1, [pc, #80]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 800185c:	4013      	ands	r3, r2
 800185e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d021      	beq.n	80018b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	490e      	ldr	r1, [pc, #56]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	60cb      	str	r3, [r1, #12]
 8001878:	e021      	b.n	80018be <HAL_GPIO_Init+0x2e2>
 800187a:	bf00      	nop
 800187c:	10320000 	.word	0x10320000
 8001880:	10310000 	.word	0x10310000
 8001884:	10220000 	.word	0x10220000
 8001888:	10210000 	.word	0x10210000
 800188c:	10120000 	.word	0x10120000
 8001890:	10110000 	.word	0x10110000
 8001894:	40021000 	.word	0x40021000
 8001898:	40010000 	.word	0x40010000
 800189c:	40010800 	.word	0x40010800
 80018a0:	40010c00 	.word	0x40010c00
 80018a4:	40011000 	.word	0x40011000
 80018a8:	40011400 	.word	0x40011400
 80018ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_GPIO_Init+0x304>)
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	4909      	ldr	r1, [pc, #36]	; (80018e0 <HAL_GPIO_Init+0x304>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	3301      	adds	r3, #1
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	fa22 f303 	lsr.w	r3, r2, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f47f ae8e 	bne.w	80015f0 <HAL_GPIO_Init+0x14>
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	372c      	adds	r7, #44	; 0x2c
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	40010400 	.word	0x40010400

080018e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	807b      	strh	r3, [r7, #2]
 80018f0:	4613      	mov	r3, r2
 80018f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018f4:	787b      	ldrb	r3, [r7, #1]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018fa:	887a      	ldrh	r2, [r7, #2]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001900:	e003      	b.n	800190a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001902:	887b      	ldrh	r3, [r7, #2]
 8001904:	041a      	lsls	r2, r3, #16
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	611a      	str	r2, [r3, #16]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e272      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 8087 	beq.w	8001a42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001934:	4b92      	ldr	r3, [pc, #584]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b04      	cmp	r3, #4
 800193e:	d00c      	beq.n	800195a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001940:	4b8f      	ldr	r3, [pc, #572]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d112      	bne.n	8001972 <HAL_RCC_OscConfig+0x5e>
 800194c:	4b8c      	ldr	r3, [pc, #560]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001958:	d10b      	bne.n	8001972 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195a:	4b89      	ldr	r3, [pc, #548]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d06c      	beq.n	8001a40 <HAL_RCC_OscConfig+0x12c>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d168      	bne.n	8001a40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e24c      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197a:	d106      	bne.n	800198a <HAL_RCC_OscConfig+0x76>
 800197c:	4b80      	ldr	r3, [pc, #512]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a7f      	ldr	r2, [pc, #508]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	e02e      	b.n	80019e8 <HAL_RCC_OscConfig+0xd4>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x98>
 8001992:	4b7b      	ldr	r3, [pc, #492]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a7a      	ldr	r2, [pc, #488]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b78      	ldr	r3, [pc, #480]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a77      	ldr	r2, [pc, #476]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e01d      	b.n	80019e8 <HAL_RCC_OscConfig+0xd4>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0xbc>
 80019b6:	4b72      	ldr	r3, [pc, #456]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a71      	ldr	r2, [pc, #452]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b6f      	ldr	r3, [pc, #444]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a6e      	ldr	r2, [pc, #440]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0xd4>
 80019d0:	4b6b      	ldr	r3, [pc, #428]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a6a      	ldr	r2, [pc, #424]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b68      	ldr	r3, [pc, #416]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a67      	ldr	r2, [pc, #412]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d013      	beq.n	8001a18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fce2 	bl	80013b8 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff fcde 	bl	80013b8 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e200      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	4b5d      	ldr	r3, [pc, #372]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0xe4>
 8001a16:	e014      	b.n	8001a42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff fcce 	bl	80013b8 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff fcca 	bl	80013b8 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e1ec      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	4b53      	ldr	r3, [pc, #332]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x10c>
 8001a3e:	e000      	b.n	8001a42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d063      	beq.n	8001b16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a4e:	4b4c      	ldr	r3, [pc, #304]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a5a:	4b49      	ldr	r3, [pc, #292]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d11c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x18c>
 8001a66:	4b46      	ldr	r3, [pc, #280]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d116      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a72:	4b43      	ldr	r3, [pc, #268]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d005      	beq.n	8001a8a <HAL_RCC_OscConfig+0x176>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e1c0      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8a:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4939      	ldr	r1, [pc, #228]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9e:	e03a      	b.n	8001b16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d020      	beq.n	8001aea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa8:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aae:	f7ff fc83 	bl	80013b8 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab6:	f7ff fc7f 	bl	80013b8 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e1a1      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4927      	ldr	r1, [pc, #156]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	600b      	str	r3, [r1, #0]
 8001ae8:	e015      	b.n	8001b16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aea:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff fc62 	bl	80013b8 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af8:	f7ff fc5e 	bl	80013b8 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e180      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d03a      	beq.n	8001b98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d019      	beq.n	8001b5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b30:	f7ff fc42 	bl	80013b8 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b38:	f7ff fc3e 	bl	80013b8 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e160      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b56:	2001      	movs	r0, #1
 8001b58:	f000 fad8 	bl	800210c <RCC_Delay>
 8001b5c:	e01c      	b.n	8001b98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_RCC_OscConfig+0x274>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b64:	f7ff fc28 	bl	80013b8 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6a:	e00f      	b.n	8001b8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fc24 	bl	80013b8 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d908      	bls.n	8001b8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e146      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	42420000 	.word	0x42420000
 8001b88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8c:	4b92      	ldr	r3, [pc, #584]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1e9      	bne.n	8001b6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80a6 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001baa:	4b8b      	ldr	r3, [pc, #556]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10d      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	4b88      	ldr	r3, [pc, #544]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	4a87      	ldr	r2, [pc, #540]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	61d3      	str	r3, [r2, #28]
 8001bc2:	4b85      	ldr	r3, [pc, #532]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd2:	4b82      	ldr	r3, [pc, #520]	; (8001ddc <HAL_RCC_OscConfig+0x4c8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d118      	bne.n	8001c10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bde:	4b7f      	ldr	r3, [pc, #508]	; (8001ddc <HAL_RCC_OscConfig+0x4c8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a7e      	ldr	r2, [pc, #504]	; (8001ddc <HAL_RCC_OscConfig+0x4c8>)
 8001be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bea:	f7ff fbe5 	bl	80013b8 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf2:	f7ff fbe1 	bl	80013b8 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b64      	cmp	r3, #100	; 0x64
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e103      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c04:	4b75      	ldr	r3, [pc, #468]	; (8001ddc <HAL_RCC_OscConfig+0x4c8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d106      	bne.n	8001c26 <HAL_RCC_OscConfig+0x312>
 8001c18:	4b6f      	ldr	r3, [pc, #444]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4a6e      	ldr	r2, [pc, #440]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6213      	str	r3, [r2, #32]
 8001c24:	e02d      	b.n	8001c82 <HAL_RCC_OscConfig+0x36e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x334>
 8001c2e:	4b6a      	ldr	r3, [pc, #424]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	4a69      	ldr	r2, [pc, #420]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	6213      	str	r3, [r2, #32]
 8001c3a:	4b67      	ldr	r3, [pc, #412]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	4a66      	ldr	r2, [pc, #408]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	f023 0304 	bic.w	r3, r3, #4
 8001c44:	6213      	str	r3, [r2, #32]
 8001c46:	e01c      	b.n	8001c82 <HAL_RCC_OscConfig+0x36e>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2b05      	cmp	r3, #5
 8001c4e:	d10c      	bne.n	8001c6a <HAL_RCC_OscConfig+0x356>
 8001c50:	4b61      	ldr	r3, [pc, #388]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4a60      	ldr	r2, [pc, #384]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c56:	f043 0304 	orr.w	r3, r3, #4
 8001c5a:	6213      	str	r3, [r2, #32]
 8001c5c:	4b5e      	ldr	r3, [pc, #376]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	4a5d      	ldr	r2, [pc, #372]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6213      	str	r3, [r2, #32]
 8001c68:	e00b      	b.n	8001c82 <HAL_RCC_OscConfig+0x36e>
 8001c6a:	4b5b      	ldr	r3, [pc, #364]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	4a5a      	ldr	r2, [pc, #360]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	6213      	str	r3, [r2, #32]
 8001c76:	4b58      	ldr	r3, [pc, #352]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4a57      	ldr	r2, [pc, #348]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	f023 0304 	bic.w	r3, r3, #4
 8001c80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d015      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff fb95 	bl	80013b8 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c90:	e00a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c92:	f7ff fb91 	bl	80013b8 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e0b1      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca8:	4b4b      	ldr	r3, [pc, #300]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0ee      	beq.n	8001c92 <HAL_RCC_OscConfig+0x37e>
 8001cb4:	e014      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff fb7f 	bl	80013b8 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cbc:	e00a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cbe:	f7ff fb7b 	bl	80013b8 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e09b      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd4:	4b40      	ldr	r3, [pc, #256]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1ee      	bne.n	8001cbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d105      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce6:	4b3c      	ldr	r3, [pc, #240]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	4a3b      	ldr	r2, [pc, #236]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 8087 	beq.w	8001e0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cfc:	4b36      	ldr	r3, [pc, #216]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d061      	beq.n	8001dcc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d146      	bne.n	8001d9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d10:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7ff fb4f 	bl	80013b8 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7ff fb4b 	bl	80013b8 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e06d      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d30:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f0      	bne.n	8001d1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d44:	d108      	bne.n	8001d58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d46:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	4921      	ldr	r1, [pc, #132]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d58:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a19      	ldr	r1, [r3, #32]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	491b      	ldr	r1, [pc, #108]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d70:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d76:	f7ff fb1f 	bl	80013b8 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7ff fb1b 	bl	80013b8 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e03d      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x46a>
 8001d9c:	e035      	b.n	8001e0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <HAL_RCC_OscConfig+0x4cc>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff fb08 	bl	80013b8 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dac:	f7ff fb04 	bl	80013b8 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e026      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x498>
 8001dca:	e01e      	b.n	8001e0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d107      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e019      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40007000 	.word	0x40007000
 8001de0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_RCC_OscConfig+0x500>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d106      	bne.n	8001e06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d001      	beq.n	8001e0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000

08001e18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0d0      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e2c:	4b6a      	ldr	r3, [pc, #424]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d910      	bls.n	8001e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3a:	4b67      	ldr	r3, [pc, #412]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 0207 	bic.w	r2, r3, #7
 8001e42:	4965      	ldr	r1, [pc, #404]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4a:	4b63      	ldr	r3, [pc, #396]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0b8      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d020      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e74:	4b59      	ldr	r3, [pc, #356]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4a58      	ldr	r2, [pc, #352]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e8c:	4b53      	ldr	r3, [pc, #332]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	4a52      	ldr	r2, [pc, #328]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e98:	4b50      	ldr	r3, [pc, #320]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	494d      	ldr	r1, [pc, #308]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d040      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d107      	bne.n	8001ece <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d115      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e07f      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d107      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed6:	4b41      	ldr	r3, [pc, #260]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d109      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e073      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee6:	4b3d      	ldr	r3, [pc, #244]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e06b      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ef6:	4b39      	ldr	r3, [pc, #228]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f023 0203 	bic.w	r2, r3, #3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4936      	ldr	r1, [pc, #216]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f08:	f7ff fa56 	bl	80013b8 <HAL_GetTick>
 8001f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f10:	f7ff fa52 	bl	80013b8 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e053      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f26:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 020c 	and.w	r2, r3, #12
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d1eb      	bne.n	8001f10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f38:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d210      	bcs.n	8001f68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f46:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 0207 	bic.w	r2, r3, #7
 8001f4e:	4922      	ldr	r1, [pc, #136]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b20      	ldr	r3, [pc, #128]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e032      	b.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f74:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4916      	ldr	r1, [pc, #88]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d009      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f92:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	490e      	ldr	r1, [pc, #56]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fa6:	f000 f821 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 8001faa:	4602      	mov	r2, r0
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	490a      	ldr	r1, [pc, #40]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb8:	5ccb      	ldrb	r3, [r1, r3]
 8001fba:	fa22 f303 	lsr.w	r3, r2, r3
 8001fbe:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <HAL_RCC_ClockConfig+0x1cc>)
 8001fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <HAL_RCC_ClockConfig+0x1d0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff f9b4 	bl	8001334 <HAL_InitTick>

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	08003fe0 	.word	0x08003fe0
 8001fe4:	20000100 	.word	0x20000100
 8001fe8:	20000104 	.word	0x20000104

08001fec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fec:	b490      	push	{r4, r7}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ff2:	4b29      	ldr	r3, [pc, #164]	; (8002098 <HAL_RCC_GetSysClockFreq+0xac>)
 8001ff4:	1d3c      	adds	r4, r7, #4
 8001ff6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ff8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ffc:	f240 2301 	movw	r3, #513	; 0x201
 8002000:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	2300      	movs	r3, #0
 8002008:	61bb      	str	r3, [r7, #24]
 800200a:	2300      	movs	r3, #0
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002016:	4b21      	ldr	r3, [pc, #132]	; (800209c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	2b04      	cmp	r3, #4
 8002024:	d002      	beq.n	800202c <HAL_RCC_GetSysClockFreq+0x40>
 8002026:	2b08      	cmp	r3, #8
 8002028:	d003      	beq.n	8002032 <HAL_RCC_GetSysClockFreq+0x46>
 800202a:	e02b      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800202c:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800202e:	623b      	str	r3, [r7, #32]
      break;
 8002030:	e02b      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	0c9b      	lsrs	r3, r3, #18
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	3328      	adds	r3, #40	; 0x28
 800203c:	443b      	add	r3, r7
 800203e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002042:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d012      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800204e:	4b13      	ldr	r3, [pc, #76]	; (800209c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	0c5b      	lsrs	r3, r3, #17
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	3328      	adds	r3, #40	; 0x28
 800205a:	443b      	add	r3, r7
 800205c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002060:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002066:	fb03 f202 	mul.w	r2, r3, r2
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
 8002072:	e004      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002078:	fb02 f303 	mul.w	r3, r2, r3
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	623b      	str	r3, [r7, #32]
      break;
 8002082:	e002      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002086:	623b      	str	r3, [r7, #32]
      break;
 8002088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800208a:	6a3b      	ldr	r3, [r7, #32]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3728      	adds	r7, #40	; 0x28
 8002090:	46bd      	mov	sp, r7
 8002092:	bc90      	pop	{r4, r7}
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	08003fd0 	.word	0x08003fd0
 800209c:	40021000 	.word	0x40021000
 80020a0:	007a1200 	.word	0x007a1200
 80020a4:	003d0900 	.word	0x003d0900

080020a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020ac:	4b02      	ldr	r3, [pc, #8]	; (80020b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	20000100 	.word	0x20000100

080020bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020c0:	f7ff fff2 	bl	80020a8 <HAL_RCC_GetHCLKFreq>
 80020c4:	4602      	mov	r2, r0
 80020c6:	4b05      	ldr	r3, [pc, #20]	; (80020dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	0a1b      	lsrs	r3, r3, #8
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	4903      	ldr	r1, [pc, #12]	; (80020e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020d2:	5ccb      	ldrb	r3, [r1, r3]
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	08003ff0 	.word	0x08003ff0

080020e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020e8:	f7ff ffde 	bl	80020a8 <HAL_RCC_GetHCLKFreq>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	0adb      	lsrs	r3, r3, #11
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	4903      	ldr	r1, [pc, #12]	; (8002108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020fa:	5ccb      	ldrb	r3, [r1, r3]
 80020fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002100:	4618      	mov	r0, r3
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	08003ff0 	.word	0x08003ff0

0800210c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <RCC_Delay+0x34>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <RCC_Delay+0x38>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	0a5b      	lsrs	r3, r3, #9
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002128:	bf00      	nop
  }
  while (Delay --);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1e5a      	subs	r2, r3, #1
 800212e:	60fa      	str	r2, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f9      	bne.n	8002128 <RCC_Delay+0x1c>
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	20000100 	.word	0x20000100
 8002144:	10624dd3 	.word	0x10624dd3

08002148 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e076      	b.n	8002248 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	2b00      	cmp	r3, #0
 8002160:	d108      	bne.n	8002174 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800216a:	d009      	beq.n	8002180 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	61da      	str	r2, [r3, #28]
 8002172:	e005      	b.n	8002180 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d106      	bne.n	80021a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7fe ff0c 	bl	8000fb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002204:	ea42 0103 	orr.w	r1, r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	0c1a      	lsrs	r2, r3, #16
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f002 0204 	and.w	r2, r2, #4
 8002226:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	69da      	ldr	r2, [r3, #28]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002236:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08c      	sub	sp, #48	; 0x30
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
 800225c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800225e:	2301      	movs	r3, #1
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_SPI_TransmitReceive+0x26>
 8002272:	2302      	movs	r3, #2
 8002274:	e18a      	b.n	800258c <HAL_SPI_TransmitReceive+0x33c>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800227e:	f7ff f89b 	bl	80013b8 <HAL_GetTick>
 8002282:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800228a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002294:	887b      	ldrh	r3, [r7, #2]
 8002296:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002298:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800229c:	2b01      	cmp	r3, #1
 800229e:	d00f      	beq.n	80022c0 <HAL_SPI_TransmitReceive+0x70>
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022a6:	d107      	bne.n	80022b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d103      	bne.n	80022b8 <HAL_SPI_TransmitReceive+0x68>
 80022b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d003      	beq.n	80022c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80022b8:	2302      	movs	r3, #2
 80022ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022be:	e15b      	b.n	8002578 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_SPI_TransmitReceive+0x82>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <HAL_SPI_TransmitReceive+0x82>
 80022cc:	887b      	ldrh	r3, [r7, #2]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d103      	bne.n	80022da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022d8:	e14e      	b.n	8002578 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d003      	beq.n	80022ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2205      	movs	r2, #5
 80022ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	887a      	ldrh	r2, [r7, #2]
 80022fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	887a      	ldrh	r2, [r7, #2]
 8002304:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	887a      	ldrh	r2, [r7, #2]
 8002316:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232e:	2b40      	cmp	r3, #64	; 0x40
 8002330:	d007      	beq.n	8002342 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002340:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800234a:	d178      	bne.n	800243e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <HAL_SPI_TransmitReceive+0x10a>
 8002354:	8b7b      	ldrh	r3, [r7, #26]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d166      	bne.n	8002428 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	881a      	ldrh	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	1c9a      	adds	r2, r3, #2
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002374:	b29b      	uxth	r3, r3
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800237e:	e053      	b.n	8002428 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b02      	cmp	r3, #2
 800238c:	d11b      	bne.n	80023c6 <HAL_SPI_TransmitReceive+0x176>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d016      	beq.n	80023c6 <HAL_SPI_TransmitReceive+0x176>
 8002398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239a:	2b01      	cmp	r3, #1
 800239c:	d113      	bne.n	80023c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	881a      	ldrh	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	1c9a      	adds	r2, r3, #2
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d119      	bne.n	8002408 <HAL_SPI_TransmitReceive+0x1b8>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d014      	beq.n	8002408 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e8:	b292      	uxth	r2, r2
 80023ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f0:	1c9a      	adds	r2, r3, #2
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002404:	2301      	movs	r3, #1
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002408:	f7fe ffd6 	bl	80013b8 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002414:	429a      	cmp	r2, r3
 8002416:	d807      	bhi.n	8002428 <HAL_SPI_TransmitReceive+0x1d8>
 8002418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241e:	d003      	beq.n	8002428 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002426:	e0a7      	b.n	8002578 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800242c:	b29b      	uxth	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1a6      	bne.n	8002380 <HAL_SPI_TransmitReceive+0x130>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1a1      	bne.n	8002380 <HAL_SPI_TransmitReceive+0x130>
 800243c:	e07c      	b.n	8002538 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <HAL_SPI_TransmitReceive+0x1fc>
 8002446:	8b7b      	ldrh	r3, [r7, #26]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d16b      	bne.n	8002524 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	330c      	adds	r3, #12
 8002456:	7812      	ldrb	r2, [r2, #0]
 8002458:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002472:	e057      	b.n	8002524 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b02      	cmp	r3, #2
 8002480:	d11c      	bne.n	80024bc <HAL_SPI_TransmitReceive+0x26c>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d017      	beq.n	80024bc <HAL_SPI_TransmitReceive+0x26c>
 800248c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248e:	2b01      	cmp	r3, #1
 8002490:	d114      	bne.n	80024bc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	330c      	adds	r3, #12
 800249c:	7812      	ldrb	r2, [r2, #0]
 800249e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d119      	bne.n	80024fe <HAL_SPI_TransmitReceive+0x2ae>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d014      	beq.n	80024fe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024fa:	2301      	movs	r3, #1
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80024fe:	f7fe ff5b 	bl	80013b8 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800250a:	429a      	cmp	r2, r3
 800250c:	d803      	bhi.n	8002516 <HAL_SPI_TransmitReceive+0x2c6>
 800250e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002514:	d102      	bne.n	800251c <HAL_SPI_TransmitReceive+0x2cc>
 8002516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002518:	2b00      	cmp	r3, #0
 800251a:	d103      	bne.n	8002524 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002522:	e029      	b.n	8002578 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002528:	b29b      	uxth	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1a2      	bne.n	8002474 <HAL_SPI_TransmitReceive+0x224>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002532:	b29b      	uxth	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d19d      	bne.n	8002474 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 f8b1 	bl	80026a4 <SPI_EndRxTxTransaction>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d006      	beq.n	8002556 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2220      	movs	r2, #32
 8002552:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002554:	e010      	b.n	8002578 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10b      	bne.n	8002576 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	e000      	b.n	8002578 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002576:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002588:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800258c:	4618      	mov	r0, r3
 800258e:	3730      	adds	r7, #48	; 0x30
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	4613      	mov	r3, r2
 80025a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025a4:	f7fe ff08 	bl	80013b8 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	4413      	add	r3, r2
 80025b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025b4:	f7fe ff00 	bl	80013b8 <HAL_GetTick>
 80025b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025ba:	4b39      	ldr	r3, [pc, #228]	; (80026a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	015b      	lsls	r3, r3, #5
 80025c0:	0d1b      	lsrs	r3, r3, #20
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	fb02 f303 	mul.w	r3, r2, r3
 80025c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025ca:	e054      	b.n	8002676 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d2:	d050      	beq.n	8002676 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025d4:	f7fe fef0 	bl	80013b8 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d902      	bls.n	80025ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d13d      	bne.n	8002666 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002602:	d111      	bne.n	8002628 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800260c:	d004      	beq.n	8002618 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002616:	d107      	bne.n	8002628 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002626:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002630:	d10f      	bne.n	8002652 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002650:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e017      	b.n	8002696 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	3b01      	subs	r3, #1
 8002674:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	4013      	ands	r3, r2
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	429a      	cmp	r2, r3
 8002684:	bf0c      	ite	eq
 8002686:	2301      	moveq	r3, #1
 8002688:	2300      	movne	r3, #0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	429a      	cmp	r2, r3
 8002692:	d19b      	bne.n	80025cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3720      	adds	r7, #32
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000100 	.word	0x20000100

080026a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2200      	movs	r2, #0
 80026b8:	2180      	movs	r1, #128	; 0x80
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f7ff ff6a 	bl	8002594 <SPI_WaitFlagStateUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ca:	f043 0220 	orr.w	r2, r3, #32
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e000      	b.n	80026d8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e03f      	b.n	8002772 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fe fca0 	bl	800104c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2224      	movs	r2, #36	; 0x24
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002722:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f905 	bl	8002934 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002738:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695a      	ldr	r2, [r3, #20]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002748:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002758:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b08a      	sub	sp, #40	; 0x28
 800277e:	af02      	add	r7, sp, #8
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	603b      	str	r3, [r7, #0]
 8002786:	4613      	mov	r3, r2
 8002788:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b20      	cmp	r3, #32
 8002798:	d17c      	bne.n	8002894 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <HAL_UART_Transmit+0x2c>
 80027a0:	88fb      	ldrh	r3, [r7, #6]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e075      	b.n	8002896 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_UART_Transmit+0x3e>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e06e      	b.n	8002896 <HAL_UART_Transmit+0x11c>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2221      	movs	r2, #33	; 0x21
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ce:	f7fe fdf3 	bl	80013b8 <HAL_GetTick>
 80027d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	88fa      	ldrh	r2, [r7, #6]
 80027d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	88fa      	ldrh	r2, [r7, #6]
 80027de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e8:	d108      	bne.n	80027fc <HAL_UART_Transmit+0x82>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d104      	bne.n	80027fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	e003      	b.n	8002804 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002800:	2300      	movs	r3, #0
 8002802:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800280c:	e02a      	b.n	8002864 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2200      	movs	r2, #0
 8002816:	2180      	movs	r1, #128	; 0x80
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f840 	bl	800289e <UART_WaitOnFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e036      	b.n	8002896 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10b      	bne.n	8002846 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800283c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	3302      	adds	r3, #2
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	e007      	b.n	8002856 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	781a      	ldrb	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	3301      	adds	r3, #1
 8002854:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1cf      	bne.n	800280e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2200      	movs	r2, #0
 8002876:	2140      	movs	r1, #64	; 0x40
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 f810 	bl	800289e <UART_WaitOnFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e006      	b.n	8002896 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	e000      	b.n	8002896 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002894:	2302      	movs	r3, #2
  }
}
 8002896:	4618      	mov	r0, r3
 8002898:	3720      	adds	r7, #32
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	4613      	mov	r3, r2
 80028ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ae:	e02c      	b.n	800290a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b6:	d028      	beq.n	800290a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d007      	beq.n	80028ce <UART_WaitOnFlagUntilTimeout+0x30>
 80028be:	f7fe fd7b 	bl	80013b8 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d21d      	bcs.n	800290a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028dc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2220      	movs	r2, #32
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e00f      	b.n	800292a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4013      	ands	r3, r2
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	429a      	cmp	r2, r3
 8002918:	bf0c      	ite	eq
 800291a:	2301      	moveq	r3, #1
 800291c:	2300      	movne	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	429a      	cmp	r2, r3
 8002926:	d0c3      	beq.n	80028b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	4313      	orrs	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800296e:	f023 030c 	bic.w	r3, r3, #12
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	430b      	orrs	r3, r1
 800297a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a2c      	ldr	r2, [pc, #176]	; (8002a48 <UART_SetConfig+0x114>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d103      	bne.n	80029a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800299c:	f7ff fba2 	bl	80020e4 <HAL_RCC_GetPCLK2Freq>
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	e002      	b.n	80029aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029a4:	f7ff fb8a 	bl	80020bc <HAL_RCC_GetPCLK1Freq>
 80029a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	009a      	lsls	r2, r3, #2
 80029b4:	441a      	add	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c0:	4a22      	ldr	r2, [pc, #136]	; (8002a4c <UART_SetConfig+0x118>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	0119      	lsls	r1, r3, #4
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	009a      	lsls	r2, r3, #2
 80029d4:	441a      	add	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80029e0:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <UART_SetConfig+0x118>)
 80029e2:	fba3 0302 	umull	r0, r3, r3, r2
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	2064      	movs	r0, #100	; 0x64
 80029ea:	fb00 f303 	mul.w	r3, r0, r3
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	3332      	adds	r3, #50	; 0x32
 80029f4:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <UART_SetConfig+0x118>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a00:	4419      	add	r1, r3
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	009a      	lsls	r2, r3, #2
 8002a0c:	441a      	add	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <UART_SetConfig+0x118>)
 8002a1a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2064      	movs	r0, #100	; 0x64
 8002a22:	fb00 f303 	mul.w	r3, r0, r3
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	3332      	adds	r3, #50	; 0x32
 8002a2c:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <UART_SetConfig+0x118>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	f003 020f 	and.w	r2, r3, #15
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	440a      	add	r2, r1
 8002a3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40013800 	.word	0x40013800
 8002a4c:	51eb851f 	.word	0x51eb851f

08002a50 <__errno>:
 8002a50:	4b01      	ldr	r3, [pc, #4]	; (8002a58 <__errno+0x8>)
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	2000010c 	.word	0x2000010c

08002a5c <__libc_init_array>:
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	2600      	movs	r6, #0
 8002a60:	4d0c      	ldr	r5, [pc, #48]	; (8002a94 <__libc_init_array+0x38>)
 8002a62:	4c0d      	ldr	r4, [pc, #52]	; (8002a98 <__libc_init_array+0x3c>)
 8002a64:	1b64      	subs	r4, r4, r5
 8002a66:	10a4      	asrs	r4, r4, #2
 8002a68:	42a6      	cmp	r6, r4
 8002a6a:	d109      	bne.n	8002a80 <__libc_init_array+0x24>
 8002a6c:	f001 fa6a 	bl	8003f44 <_init>
 8002a70:	2600      	movs	r6, #0
 8002a72:	4d0a      	ldr	r5, [pc, #40]	; (8002a9c <__libc_init_array+0x40>)
 8002a74:	4c0a      	ldr	r4, [pc, #40]	; (8002aa0 <__libc_init_array+0x44>)
 8002a76:	1b64      	subs	r4, r4, r5
 8002a78:	10a4      	asrs	r4, r4, #2
 8002a7a:	42a6      	cmp	r6, r4
 8002a7c:	d105      	bne.n	8002a8a <__libc_init_array+0x2e>
 8002a7e:	bd70      	pop	{r4, r5, r6, pc}
 8002a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a84:	4798      	blx	r3
 8002a86:	3601      	adds	r6, #1
 8002a88:	e7ee      	b.n	8002a68 <__libc_init_array+0xc>
 8002a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a8e:	4798      	blx	r3
 8002a90:	3601      	adds	r6, #1
 8002a92:	e7f2      	b.n	8002a7a <__libc_init_array+0x1e>
 8002a94:	08004140 	.word	0x08004140
 8002a98:	08004140 	.word	0x08004140
 8002a9c:	08004140 	.word	0x08004140
 8002aa0:	08004144 	.word	0x08004144

08002aa4 <memset>:
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4402      	add	r2, r0
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d100      	bne.n	8002aae <memset+0xa>
 8002aac:	4770      	bx	lr
 8002aae:	f803 1b01 	strb.w	r1, [r3], #1
 8002ab2:	e7f9      	b.n	8002aa8 <memset+0x4>

08002ab4 <srand>:
 8002ab4:	b538      	push	{r3, r4, r5, lr}
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <srand+0x44>)
 8002ab8:	4604      	mov	r4, r0
 8002aba:	681d      	ldr	r5, [r3, #0]
 8002abc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002abe:	b9b3      	cbnz	r3, 8002aee <srand+0x3a>
 8002ac0:	2018      	movs	r0, #24
 8002ac2:	f000 f8b3 	bl	8002c2c <malloc>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	63a8      	str	r0, [r5, #56]	; 0x38
 8002aca:	b920      	cbnz	r0, 8002ad6 <srand+0x22>
 8002acc:	2142      	movs	r1, #66	; 0x42
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <srand+0x48>)
 8002ad0:	480b      	ldr	r0, [pc, #44]	; (8002b00 <srand+0x4c>)
 8002ad2:	f000 f87b 	bl	8002bcc <__assert_func>
 8002ad6:	490b      	ldr	r1, [pc, #44]	; (8002b04 <srand+0x50>)
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <srand+0x54>)
 8002ada:	e9c0 1300 	strd	r1, r3, [r0]
 8002ade:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <srand+0x58>)
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	6083      	str	r3, [r0, #8]
 8002ae4:	230b      	movs	r3, #11
 8002ae6:	8183      	strh	r3, [r0, #12]
 8002ae8:	2001      	movs	r0, #1
 8002aea:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002aee:	2200      	movs	r2, #0
 8002af0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002af2:	611c      	str	r4, [r3, #16]
 8002af4:	615a      	str	r2, [r3, #20]
 8002af6:	bd38      	pop	{r3, r4, r5, pc}
 8002af8:	2000010c 	.word	0x2000010c
 8002afc:	08003ffc 	.word	0x08003ffc
 8002b00:	08004013 	.word	0x08004013
 8002b04:	abcd330e 	.word	0xabcd330e
 8002b08:	e66d1234 	.word	0xe66d1234
 8002b0c:	0005deec 	.word	0x0005deec

08002b10 <rand>:
 8002b10:	4b16      	ldr	r3, [pc, #88]	; (8002b6c <rand+0x5c>)
 8002b12:	b510      	push	{r4, lr}
 8002b14:	681c      	ldr	r4, [r3, #0]
 8002b16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b18:	b9b3      	cbnz	r3, 8002b48 <rand+0x38>
 8002b1a:	2018      	movs	r0, #24
 8002b1c:	f000 f886 	bl	8002c2c <malloc>
 8002b20:	4602      	mov	r2, r0
 8002b22:	63a0      	str	r0, [r4, #56]	; 0x38
 8002b24:	b920      	cbnz	r0, 8002b30 <rand+0x20>
 8002b26:	214e      	movs	r1, #78	; 0x4e
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <rand+0x60>)
 8002b2a:	4812      	ldr	r0, [pc, #72]	; (8002b74 <rand+0x64>)
 8002b2c:	f000 f84e 	bl	8002bcc <__assert_func>
 8002b30:	4911      	ldr	r1, [pc, #68]	; (8002b78 <rand+0x68>)
 8002b32:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <rand+0x6c>)
 8002b34:	e9c0 1300 	strd	r1, r3, [r0]
 8002b38:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <rand+0x70>)
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	6083      	str	r3, [r0, #8]
 8002b3e:	230b      	movs	r3, #11
 8002b40:	8183      	strh	r3, [r0, #12]
 8002b42:	2001      	movs	r0, #1
 8002b44:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002b48:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002b4a:	4a0e      	ldr	r2, [pc, #56]	; (8002b84 <rand+0x74>)
 8002b4c:	6920      	ldr	r0, [r4, #16]
 8002b4e:	6963      	ldr	r3, [r4, #20]
 8002b50:	4342      	muls	r2, r0
 8002b52:	490d      	ldr	r1, [pc, #52]	; (8002b88 <rand+0x78>)
 8002b54:	fb01 2203 	mla	r2, r1, r3, r2
 8002b58:	fba0 0101 	umull	r0, r1, r0, r1
 8002b5c:	1c43      	adds	r3, r0, #1
 8002b5e:	eb42 0001 	adc.w	r0, r2, r1
 8002b62:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8002b66:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002b6a:	bd10      	pop	{r4, pc}
 8002b6c:	2000010c 	.word	0x2000010c
 8002b70:	08003ffc 	.word	0x08003ffc
 8002b74:	08004013 	.word	0x08004013
 8002b78:	abcd330e 	.word	0xabcd330e
 8002b7c:	e66d1234 	.word	0xe66d1234
 8002b80:	0005deec 	.word	0x0005deec
 8002b84:	5851f42d 	.word	0x5851f42d
 8002b88:	4c957f2d 	.word	0x4c957f2d

08002b8c <siprintf>:
 8002b8c:	b40e      	push	{r1, r2, r3}
 8002b8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b92:	b500      	push	{lr}
 8002b94:	b09c      	sub	sp, #112	; 0x70
 8002b96:	ab1d      	add	r3, sp, #116	; 0x74
 8002b98:	9002      	str	r0, [sp, #8]
 8002b9a:	9006      	str	r0, [sp, #24]
 8002b9c:	9107      	str	r1, [sp, #28]
 8002b9e:	9104      	str	r1, [sp, #16]
 8002ba0:	4808      	ldr	r0, [pc, #32]	; (8002bc4 <siprintf+0x38>)
 8002ba2:	4909      	ldr	r1, [pc, #36]	; (8002bc8 <siprintf+0x3c>)
 8002ba4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ba8:	9105      	str	r1, [sp, #20]
 8002baa:	6800      	ldr	r0, [r0, #0]
 8002bac:	a902      	add	r1, sp, #8
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	f000 f97c 	bl	8002eac <_svfiprintf_r>
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	9b02      	ldr	r3, [sp, #8]
 8002bb8:	701a      	strb	r2, [r3, #0]
 8002bba:	b01c      	add	sp, #112	; 0x70
 8002bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bc0:	b003      	add	sp, #12
 8002bc2:	4770      	bx	lr
 8002bc4:	2000010c 	.word	0x2000010c
 8002bc8:	ffff0208 	.word	0xffff0208

08002bcc <__assert_func>:
 8002bcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002bce:	4614      	mov	r4, r2
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <__assert_func+0x2c>)
 8002bd4:	4605      	mov	r5, r0
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68d8      	ldr	r0, [r3, #12]
 8002bda:	b14c      	cbz	r4, 8002bf0 <__assert_func+0x24>
 8002bdc:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <__assert_func+0x30>)
 8002bde:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002be2:	9100      	str	r1, [sp, #0]
 8002be4:	462b      	mov	r3, r5
 8002be6:	4906      	ldr	r1, [pc, #24]	; (8002c00 <__assert_func+0x34>)
 8002be8:	f000 f80e 	bl	8002c08 <fiprintf>
 8002bec:	f000 fe1c 	bl	8003828 <abort>
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <__assert_func+0x38>)
 8002bf2:	461c      	mov	r4, r3
 8002bf4:	e7f3      	b.n	8002bde <__assert_func+0x12>
 8002bf6:	bf00      	nop
 8002bf8:	2000010c 	.word	0x2000010c
 8002bfc:	0800406e 	.word	0x0800406e
 8002c00:	0800407b 	.word	0x0800407b
 8002c04:	080040a9 	.word	0x080040a9

08002c08 <fiprintf>:
 8002c08:	b40e      	push	{r1, r2, r3}
 8002c0a:	b503      	push	{r0, r1, lr}
 8002c0c:	4601      	mov	r1, r0
 8002c0e:	ab03      	add	r3, sp, #12
 8002c10:	4805      	ldr	r0, [pc, #20]	; (8002c28 <fiprintf+0x20>)
 8002c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c16:	6800      	ldr	r0, [r0, #0]
 8002c18:	9301      	str	r3, [sp, #4]
 8002c1a:	f000 fa6f 	bl	80030fc <_vfiprintf_r>
 8002c1e:	b002      	add	sp, #8
 8002c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c24:	b003      	add	sp, #12
 8002c26:	4770      	bx	lr
 8002c28:	2000010c 	.word	0x2000010c

08002c2c <malloc>:
 8002c2c:	4b02      	ldr	r3, [pc, #8]	; (8002c38 <malloc+0xc>)
 8002c2e:	4601      	mov	r1, r0
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	f000 b86b 	b.w	8002d0c <_malloc_r>
 8002c36:	bf00      	nop
 8002c38:	2000010c 	.word	0x2000010c

08002c3c <_free_r>:
 8002c3c:	b538      	push	{r3, r4, r5, lr}
 8002c3e:	4605      	mov	r5, r0
 8002c40:	2900      	cmp	r1, #0
 8002c42:	d040      	beq.n	8002cc6 <_free_r+0x8a>
 8002c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c48:	1f0c      	subs	r4, r1, #4
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	bfb8      	it	lt
 8002c4e:	18e4      	addlt	r4, r4, r3
 8002c50:	f001 f844 	bl	8003cdc <__malloc_lock>
 8002c54:	4a1c      	ldr	r2, [pc, #112]	; (8002cc8 <_free_r+0x8c>)
 8002c56:	6813      	ldr	r3, [r2, #0]
 8002c58:	b933      	cbnz	r3, 8002c68 <_free_r+0x2c>
 8002c5a:	6063      	str	r3, [r4, #4]
 8002c5c:	6014      	str	r4, [r2, #0]
 8002c5e:	4628      	mov	r0, r5
 8002c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c64:	f001 b840 	b.w	8003ce8 <__malloc_unlock>
 8002c68:	42a3      	cmp	r3, r4
 8002c6a:	d908      	bls.n	8002c7e <_free_r+0x42>
 8002c6c:	6820      	ldr	r0, [r4, #0]
 8002c6e:	1821      	adds	r1, r4, r0
 8002c70:	428b      	cmp	r3, r1
 8002c72:	bf01      	itttt	eq
 8002c74:	6819      	ldreq	r1, [r3, #0]
 8002c76:	685b      	ldreq	r3, [r3, #4]
 8002c78:	1809      	addeq	r1, r1, r0
 8002c7a:	6021      	streq	r1, [r4, #0]
 8002c7c:	e7ed      	b.n	8002c5a <_free_r+0x1e>
 8002c7e:	461a      	mov	r2, r3
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	b10b      	cbz	r3, 8002c88 <_free_r+0x4c>
 8002c84:	42a3      	cmp	r3, r4
 8002c86:	d9fa      	bls.n	8002c7e <_free_r+0x42>
 8002c88:	6811      	ldr	r1, [r2, #0]
 8002c8a:	1850      	adds	r0, r2, r1
 8002c8c:	42a0      	cmp	r0, r4
 8002c8e:	d10b      	bne.n	8002ca8 <_free_r+0x6c>
 8002c90:	6820      	ldr	r0, [r4, #0]
 8002c92:	4401      	add	r1, r0
 8002c94:	1850      	adds	r0, r2, r1
 8002c96:	4283      	cmp	r3, r0
 8002c98:	6011      	str	r1, [r2, #0]
 8002c9a:	d1e0      	bne.n	8002c5e <_free_r+0x22>
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	4401      	add	r1, r0
 8002ca2:	6011      	str	r1, [r2, #0]
 8002ca4:	6053      	str	r3, [r2, #4]
 8002ca6:	e7da      	b.n	8002c5e <_free_r+0x22>
 8002ca8:	d902      	bls.n	8002cb0 <_free_r+0x74>
 8002caa:	230c      	movs	r3, #12
 8002cac:	602b      	str	r3, [r5, #0]
 8002cae:	e7d6      	b.n	8002c5e <_free_r+0x22>
 8002cb0:	6820      	ldr	r0, [r4, #0]
 8002cb2:	1821      	adds	r1, r4, r0
 8002cb4:	428b      	cmp	r3, r1
 8002cb6:	bf01      	itttt	eq
 8002cb8:	6819      	ldreq	r1, [r3, #0]
 8002cba:	685b      	ldreq	r3, [r3, #4]
 8002cbc:	1809      	addeq	r1, r1, r0
 8002cbe:	6021      	streq	r1, [r4, #0]
 8002cc0:	6063      	str	r3, [r4, #4]
 8002cc2:	6054      	str	r4, [r2, #4]
 8002cc4:	e7cb      	b.n	8002c5e <_free_r+0x22>
 8002cc6:	bd38      	pop	{r3, r4, r5, pc}
 8002cc8:	20000328 	.word	0x20000328

08002ccc <sbrk_aligned>:
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	4e0e      	ldr	r6, [pc, #56]	; (8002d08 <sbrk_aligned+0x3c>)
 8002cd0:	460c      	mov	r4, r1
 8002cd2:	6831      	ldr	r1, [r6, #0]
 8002cd4:	4605      	mov	r5, r0
 8002cd6:	b911      	cbnz	r1, 8002cde <sbrk_aligned+0x12>
 8002cd8:	f000 fcd6 	bl	8003688 <_sbrk_r>
 8002cdc:	6030      	str	r0, [r6, #0]
 8002cde:	4621      	mov	r1, r4
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	f000 fcd1 	bl	8003688 <_sbrk_r>
 8002ce6:	1c43      	adds	r3, r0, #1
 8002ce8:	d00a      	beq.n	8002d00 <sbrk_aligned+0x34>
 8002cea:	1cc4      	adds	r4, r0, #3
 8002cec:	f024 0403 	bic.w	r4, r4, #3
 8002cf0:	42a0      	cmp	r0, r4
 8002cf2:	d007      	beq.n	8002d04 <sbrk_aligned+0x38>
 8002cf4:	1a21      	subs	r1, r4, r0
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	f000 fcc6 	bl	8003688 <_sbrk_r>
 8002cfc:	3001      	adds	r0, #1
 8002cfe:	d101      	bne.n	8002d04 <sbrk_aligned+0x38>
 8002d00:	f04f 34ff 	mov.w	r4, #4294967295
 8002d04:	4620      	mov	r0, r4
 8002d06:	bd70      	pop	{r4, r5, r6, pc}
 8002d08:	2000032c 	.word	0x2000032c

08002d0c <_malloc_r>:
 8002d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d10:	1ccd      	adds	r5, r1, #3
 8002d12:	f025 0503 	bic.w	r5, r5, #3
 8002d16:	3508      	adds	r5, #8
 8002d18:	2d0c      	cmp	r5, #12
 8002d1a:	bf38      	it	cc
 8002d1c:	250c      	movcc	r5, #12
 8002d1e:	2d00      	cmp	r5, #0
 8002d20:	4607      	mov	r7, r0
 8002d22:	db01      	blt.n	8002d28 <_malloc_r+0x1c>
 8002d24:	42a9      	cmp	r1, r5
 8002d26:	d905      	bls.n	8002d34 <_malloc_r+0x28>
 8002d28:	230c      	movs	r3, #12
 8002d2a:	2600      	movs	r6, #0
 8002d2c:	603b      	str	r3, [r7, #0]
 8002d2e:	4630      	mov	r0, r6
 8002d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d34:	4e2e      	ldr	r6, [pc, #184]	; (8002df0 <_malloc_r+0xe4>)
 8002d36:	f000 ffd1 	bl	8003cdc <__malloc_lock>
 8002d3a:	6833      	ldr	r3, [r6, #0]
 8002d3c:	461c      	mov	r4, r3
 8002d3e:	bb34      	cbnz	r4, 8002d8e <_malloc_r+0x82>
 8002d40:	4629      	mov	r1, r5
 8002d42:	4638      	mov	r0, r7
 8002d44:	f7ff ffc2 	bl	8002ccc <sbrk_aligned>
 8002d48:	1c43      	adds	r3, r0, #1
 8002d4a:	4604      	mov	r4, r0
 8002d4c:	d14d      	bne.n	8002dea <_malloc_r+0xde>
 8002d4e:	6834      	ldr	r4, [r6, #0]
 8002d50:	4626      	mov	r6, r4
 8002d52:	2e00      	cmp	r6, #0
 8002d54:	d140      	bne.n	8002dd8 <_malloc_r+0xcc>
 8002d56:	6823      	ldr	r3, [r4, #0]
 8002d58:	4631      	mov	r1, r6
 8002d5a:	4638      	mov	r0, r7
 8002d5c:	eb04 0803 	add.w	r8, r4, r3
 8002d60:	f000 fc92 	bl	8003688 <_sbrk_r>
 8002d64:	4580      	cmp	r8, r0
 8002d66:	d13a      	bne.n	8002dde <_malloc_r+0xd2>
 8002d68:	6821      	ldr	r1, [r4, #0]
 8002d6a:	3503      	adds	r5, #3
 8002d6c:	1a6d      	subs	r5, r5, r1
 8002d6e:	f025 0503 	bic.w	r5, r5, #3
 8002d72:	3508      	adds	r5, #8
 8002d74:	2d0c      	cmp	r5, #12
 8002d76:	bf38      	it	cc
 8002d78:	250c      	movcc	r5, #12
 8002d7a:	4638      	mov	r0, r7
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	f7ff ffa5 	bl	8002ccc <sbrk_aligned>
 8002d82:	3001      	adds	r0, #1
 8002d84:	d02b      	beq.n	8002dde <_malloc_r+0xd2>
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	442b      	add	r3, r5
 8002d8a:	6023      	str	r3, [r4, #0]
 8002d8c:	e00e      	b.n	8002dac <_malloc_r+0xa0>
 8002d8e:	6822      	ldr	r2, [r4, #0]
 8002d90:	1b52      	subs	r2, r2, r5
 8002d92:	d41e      	bmi.n	8002dd2 <_malloc_r+0xc6>
 8002d94:	2a0b      	cmp	r2, #11
 8002d96:	d916      	bls.n	8002dc6 <_malloc_r+0xba>
 8002d98:	1961      	adds	r1, r4, r5
 8002d9a:	42a3      	cmp	r3, r4
 8002d9c:	6025      	str	r5, [r4, #0]
 8002d9e:	bf18      	it	ne
 8002da0:	6059      	strne	r1, [r3, #4]
 8002da2:	6863      	ldr	r3, [r4, #4]
 8002da4:	bf08      	it	eq
 8002da6:	6031      	streq	r1, [r6, #0]
 8002da8:	5162      	str	r2, [r4, r5]
 8002daa:	604b      	str	r3, [r1, #4]
 8002dac:	4638      	mov	r0, r7
 8002dae:	f104 060b 	add.w	r6, r4, #11
 8002db2:	f000 ff99 	bl	8003ce8 <__malloc_unlock>
 8002db6:	f026 0607 	bic.w	r6, r6, #7
 8002dba:	1d23      	adds	r3, r4, #4
 8002dbc:	1af2      	subs	r2, r6, r3
 8002dbe:	d0b6      	beq.n	8002d2e <_malloc_r+0x22>
 8002dc0:	1b9b      	subs	r3, r3, r6
 8002dc2:	50a3      	str	r3, [r4, r2]
 8002dc4:	e7b3      	b.n	8002d2e <_malloc_r+0x22>
 8002dc6:	6862      	ldr	r2, [r4, #4]
 8002dc8:	42a3      	cmp	r3, r4
 8002dca:	bf0c      	ite	eq
 8002dcc:	6032      	streq	r2, [r6, #0]
 8002dce:	605a      	strne	r2, [r3, #4]
 8002dd0:	e7ec      	b.n	8002dac <_malloc_r+0xa0>
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	6864      	ldr	r4, [r4, #4]
 8002dd6:	e7b2      	b.n	8002d3e <_malloc_r+0x32>
 8002dd8:	4634      	mov	r4, r6
 8002dda:	6876      	ldr	r6, [r6, #4]
 8002ddc:	e7b9      	b.n	8002d52 <_malloc_r+0x46>
 8002dde:	230c      	movs	r3, #12
 8002de0:	4638      	mov	r0, r7
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	f000 ff80 	bl	8003ce8 <__malloc_unlock>
 8002de8:	e7a1      	b.n	8002d2e <_malloc_r+0x22>
 8002dea:	6025      	str	r5, [r4, #0]
 8002dec:	e7de      	b.n	8002dac <_malloc_r+0xa0>
 8002dee:	bf00      	nop
 8002df0:	20000328 	.word	0x20000328

08002df4 <__ssputs_r>:
 8002df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002df8:	688e      	ldr	r6, [r1, #8]
 8002dfa:	4682      	mov	sl, r0
 8002dfc:	429e      	cmp	r6, r3
 8002dfe:	460c      	mov	r4, r1
 8002e00:	4690      	mov	r8, r2
 8002e02:	461f      	mov	r7, r3
 8002e04:	d838      	bhi.n	8002e78 <__ssputs_r+0x84>
 8002e06:	898a      	ldrh	r2, [r1, #12]
 8002e08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e0c:	d032      	beq.n	8002e74 <__ssputs_r+0x80>
 8002e0e:	6825      	ldr	r5, [r4, #0]
 8002e10:	6909      	ldr	r1, [r1, #16]
 8002e12:	3301      	adds	r3, #1
 8002e14:	eba5 0901 	sub.w	r9, r5, r1
 8002e18:	6965      	ldr	r5, [r4, #20]
 8002e1a:	444b      	add	r3, r9
 8002e1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e24:	106d      	asrs	r5, r5, #1
 8002e26:	429d      	cmp	r5, r3
 8002e28:	bf38      	it	cc
 8002e2a:	461d      	movcc	r5, r3
 8002e2c:	0553      	lsls	r3, r2, #21
 8002e2e:	d531      	bpl.n	8002e94 <__ssputs_r+0xa0>
 8002e30:	4629      	mov	r1, r5
 8002e32:	f7ff ff6b 	bl	8002d0c <_malloc_r>
 8002e36:	4606      	mov	r6, r0
 8002e38:	b950      	cbnz	r0, 8002e50 <__ssputs_r+0x5c>
 8002e3a:	230c      	movs	r3, #12
 8002e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e40:	f8ca 3000 	str.w	r3, [sl]
 8002e44:	89a3      	ldrh	r3, [r4, #12]
 8002e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e4a:	81a3      	strh	r3, [r4, #12]
 8002e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e50:	464a      	mov	r2, r9
 8002e52:	6921      	ldr	r1, [r4, #16]
 8002e54:	f000 ff1a 	bl	8003c8c <memcpy>
 8002e58:	89a3      	ldrh	r3, [r4, #12]
 8002e5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e62:	81a3      	strh	r3, [r4, #12]
 8002e64:	6126      	str	r6, [r4, #16]
 8002e66:	444e      	add	r6, r9
 8002e68:	6026      	str	r6, [r4, #0]
 8002e6a:	463e      	mov	r6, r7
 8002e6c:	6165      	str	r5, [r4, #20]
 8002e6e:	eba5 0509 	sub.w	r5, r5, r9
 8002e72:	60a5      	str	r5, [r4, #8]
 8002e74:	42be      	cmp	r6, r7
 8002e76:	d900      	bls.n	8002e7a <__ssputs_r+0x86>
 8002e78:	463e      	mov	r6, r7
 8002e7a:	4632      	mov	r2, r6
 8002e7c:	4641      	mov	r1, r8
 8002e7e:	6820      	ldr	r0, [r4, #0]
 8002e80:	f000 ff12 	bl	8003ca8 <memmove>
 8002e84:	68a3      	ldr	r3, [r4, #8]
 8002e86:	2000      	movs	r0, #0
 8002e88:	1b9b      	subs	r3, r3, r6
 8002e8a:	60a3      	str	r3, [r4, #8]
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	4433      	add	r3, r6
 8002e90:	6023      	str	r3, [r4, #0]
 8002e92:	e7db      	b.n	8002e4c <__ssputs_r+0x58>
 8002e94:	462a      	mov	r2, r5
 8002e96:	f000 ff2d 	bl	8003cf4 <_realloc_r>
 8002e9a:	4606      	mov	r6, r0
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	d1e1      	bne.n	8002e64 <__ssputs_r+0x70>
 8002ea0:	4650      	mov	r0, sl
 8002ea2:	6921      	ldr	r1, [r4, #16]
 8002ea4:	f7ff feca 	bl	8002c3c <_free_r>
 8002ea8:	e7c7      	b.n	8002e3a <__ssputs_r+0x46>
	...

08002eac <_svfiprintf_r>:
 8002eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eb0:	4698      	mov	r8, r3
 8002eb2:	898b      	ldrh	r3, [r1, #12]
 8002eb4:	4607      	mov	r7, r0
 8002eb6:	061b      	lsls	r3, r3, #24
 8002eb8:	460d      	mov	r5, r1
 8002eba:	4614      	mov	r4, r2
 8002ebc:	b09d      	sub	sp, #116	; 0x74
 8002ebe:	d50e      	bpl.n	8002ede <_svfiprintf_r+0x32>
 8002ec0:	690b      	ldr	r3, [r1, #16]
 8002ec2:	b963      	cbnz	r3, 8002ede <_svfiprintf_r+0x32>
 8002ec4:	2140      	movs	r1, #64	; 0x40
 8002ec6:	f7ff ff21 	bl	8002d0c <_malloc_r>
 8002eca:	6028      	str	r0, [r5, #0]
 8002ecc:	6128      	str	r0, [r5, #16]
 8002ece:	b920      	cbnz	r0, 8002eda <_svfiprintf_r+0x2e>
 8002ed0:	230c      	movs	r3, #12
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed8:	e0d1      	b.n	800307e <_svfiprintf_r+0x1d2>
 8002eda:	2340      	movs	r3, #64	; 0x40
 8002edc:	616b      	str	r3, [r5, #20]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ee2:	2320      	movs	r3, #32
 8002ee4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ee8:	2330      	movs	r3, #48	; 0x30
 8002eea:	f04f 0901 	mov.w	r9, #1
 8002eee:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ef2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003098 <_svfiprintf_r+0x1ec>
 8002ef6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002efa:	4623      	mov	r3, r4
 8002efc:	469a      	mov	sl, r3
 8002efe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f02:	b10a      	cbz	r2, 8002f08 <_svfiprintf_r+0x5c>
 8002f04:	2a25      	cmp	r2, #37	; 0x25
 8002f06:	d1f9      	bne.n	8002efc <_svfiprintf_r+0x50>
 8002f08:	ebba 0b04 	subs.w	fp, sl, r4
 8002f0c:	d00b      	beq.n	8002f26 <_svfiprintf_r+0x7a>
 8002f0e:	465b      	mov	r3, fp
 8002f10:	4622      	mov	r2, r4
 8002f12:	4629      	mov	r1, r5
 8002f14:	4638      	mov	r0, r7
 8002f16:	f7ff ff6d 	bl	8002df4 <__ssputs_r>
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	f000 80aa 	beq.w	8003074 <_svfiprintf_r+0x1c8>
 8002f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f22:	445a      	add	r2, fp
 8002f24:	9209      	str	r2, [sp, #36]	; 0x24
 8002f26:	f89a 3000 	ldrb.w	r3, [sl]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80a2 	beq.w	8003074 <_svfiprintf_r+0x1c8>
 8002f30:	2300      	movs	r3, #0
 8002f32:	f04f 32ff 	mov.w	r2, #4294967295
 8002f36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f3a:	f10a 0a01 	add.w	sl, sl, #1
 8002f3e:	9304      	str	r3, [sp, #16]
 8002f40:	9307      	str	r3, [sp, #28]
 8002f42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f46:	931a      	str	r3, [sp, #104]	; 0x68
 8002f48:	4654      	mov	r4, sl
 8002f4a:	2205      	movs	r2, #5
 8002f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f50:	4851      	ldr	r0, [pc, #324]	; (8003098 <_svfiprintf_r+0x1ec>)
 8002f52:	f000 fe8d 	bl	8003c70 <memchr>
 8002f56:	9a04      	ldr	r2, [sp, #16]
 8002f58:	b9d8      	cbnz	r0, 8002f92 <_svfiprintf_r+0xe6>
 8002f5a:	06d0      	lsls	r0, r2, #27
 8002f5c:	bf44      	itt	mi
 8002f5e:	2320      	movmi	r3, #32
 8002f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f64:	0711      	lsls	r1, r2, #28
 8002f66:	bf44      	itt	mi
 8002f68:	232b      	movmi	r3, #43	; 0x2b
 8002f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8002f72:	2b2a      	cmp	r3, #42	; 0x2a
 8002f74:	d015      	beq.n	8002fa2 <_svfiprintf_r+0xf6>
 8002f76:	4654      	mov	r4, sl
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f04f 0c0a 	mov.w	ip, #10
 8002f7e:	9a07      	ldr	r2, [sp, #28]
 8002f80:	4621      	mov	r1, r4
 8002f82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f86:	3b30      	subs	r3, #48	; 0x30
 8002f88:	2b09      	cmp	r3, #9
 8002f8a:	d94e      	bls.n	800302a <_svfiprintf_r+0x17e>
 8002f8c:	b1b0      	cbz	r0, 8002fbc <_svfiprintf_r+0x110>
 8002f8e:	9207      	str	r2, [sp, #28]
 8002f90:	e014      	b.n	8002fbc <_svfiprintf_r+0x110>
 8002f92:	eba0 0308 	sub.w	r3, r0, r8
 8002f96:	fa09 f303 	lsl.w	r3, r9, r3
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	46a2      	mov	sl, r4
 8002f9e:	9304      	str	r3, [sp, #16]
 8002fa0:	e7d2      	b.n	8002f48 <_svfiprintf_r+0x9c>
 8002fa2:	9b03      	ldr	r3, [sp, #12]
 8002fa4:	1d19      	adds	r1, r3, #4
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	9103      	str	r1, [sp, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bfbb      	ittet	lt
 8002fae:	425b      	neglt	r3, r3
 8002fb0:	f042 0202 	orrlt.w	r2, r2, #2
 8002fb4:	9307      	strge	r3, [sp, #28]
 8002fb6:	9307      	strlt	r3, [sp, #28]
 8002fb8:	bfb8      	it	lt
 8002fba:	9204      	strlt	r2, [sp, #16]
 8002fbc:	7823      	ldrb	r3, [r4, #0]
 8002fbe:	2b2e      	cmp	r3, #46	; 0x2e
 8002fc0:	d10c      	bne.n	8002fdc <_svfiprintf_r+0x130>
 8002fc2:	7863      	ldrb	r3, [r4, #1]
 8002fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8002fc6:	d135      	bne.n	8003034 <_svfiprintf_r+0x188>
 8002fc8:	9b03      	ldr	r3, [sp, #12]
 8002fca:	3402      	adds	r4, #2
 8002fcc:	1d1a      	adds	r2, r3, #4
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	9203      	str	r2, [sp, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	bfb8      	it	lt
 8002fd6:	f04f 33ff 	movlt.w	r3, #4294967295
 8002fda:	9305      	str	r3, [sp, #20]
 8002fdc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800309c <_svfiprintf_r+0x1f0>
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	4650      	mov	r0, sl
 8002fe4:	7821      	ldrb	r1, [r4, #0]
 8002fe6:	f000 fe43 	bl	8003c70 <memchr>
 8002fea:	b140      	cbz	r0, 8002ffe <_svfiprintf_r+0x152>
 8002fec:	2340      	movs	r3, #64	; 0x40
 8002fee:	eba0 000a 	sub.w	r0, r0, sl
 8002ff2:	fa03 f000 	lsl.w	r0, r3, r0
 8002ff6:	9b04      	ldr	r3, [sp, #16]
 8002ff8:	3401      	adds	r4, #1
 8002ffa:	4303      	orrs	r3, r0
 8002ffc:	9304      	str	r3, [sp, #16]
 8002ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003002:	2206      	movs	r2, #6
 8003004:	4826      	ldr	r0, [pc, #152]	; (80030a0 <_svfiprintf_r+0x1f4>)
 8003006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800300a:	f000 fe31 	bl	8003c70 <memchr>
 800300e:	2800      	cmp	r0, #0
 8003010:	d038      	beq.n	8003084 <_svfiprintf_r+0x1d8>
 8003012:	4b24      	ldr	r3, [pc, #144]	; (80030a4 <_svfiprintf_r+0x1f8>)
 8003014:	bb1b      	cbnz	r3, 800305e <_svfiprintf_r+0x1b2>
 8003016:	9b03      	ldr	r3, [sp, #12]
 8003018:	3307      	adds	r3, #7
 800301a:	f023 0307 	bic.w	r3, r3, #7
 800301e:	3308      	adds	r3, #8
 8003020:	9303      	str	r3, [sp, #12]
 8003022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003024:	4433      	add	r3, r6
 8003026:	9309      	str	r3, [sp, #36]	; 0x24
 8003028:	e767      	b.n	8002efa <_svfiprintf_r+0x4e>
 800302a:	460c      	mov	r4, r1
 800302c:	2001      	movs	r0, #1
 800302e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003032:	e7a5      	b.n	8002f80 <_svfiprintf_r+0xd4>
 8003034:	2300      	movs	r3, #0
 8003036:	f04f 0c0a 	mov.w	ip, #10
 800303a:	4619      	mov	r1, r3
 800303c:	3401      	adds	r4, #1
 800303e:	9305      	str	r3, [sp, #20]
 8003040:	4620      	mov	r0, r4
 8003042:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003046:	3a30      	subs	r2, #48	; 0x30
 8003048:	2a09      	cmp	r2, #9
 800304a:	d903      	bls.n	8003054 <_svfiprintf_r+0x1a8>
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0c5      	beq.n	8002fdc <_svfiprintf_r+0x130>
 8003050:	9105      	str	r1, [sp, #20]
 8003052:	e7c3      	b.n	8002fdc <_svfiprintf_r+0x130>
 8003054:	4604      	mov	r4, r0
 8003056:	2301      	movs	r3, #1
 8003058:	fb0c 2101 	mla	r1, ip, r1, r2
 800305c:	e7f0      	b.n	8003040 <_svfiprintf_r+0x194>
 800305e:	ab03      	add	r3, sp, #12
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	462a      	mov	r2, r5
 8003064:	4638      	mov	r0, r7
 8003066:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <_svfiprintf_r+0x1fc>)
 8003068:	a904      	add	r1, sp, #16
 800306a:	f3af 8000 	nop.w
 800306e:	1c42      	adds	r2, r0, #1
 8003070:	4606      	mov	r6, r0
 8003072:	d1d6      	bne.n	8003022 <_svfiprintf_r+0x176>
 8003074:	89ab      	ldrh	r3, [r5, #12]
 8003076:	065b      	lsls	r3, r3, #25
 8003078:	f53f af2c 	bmi.w	8002ed4 <_svfiprintf_r+0x28>
 800307c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800307e:	b01d      	add	sp, #116	; 0x74
 8003080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003084:	ab03      	add	r3, sp, #12
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	462a      	mov	r2, r5
 800308a:	4638      	mov	r0, r7
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <_svfiprintf_r+0x1fc>)
 800308e:	a904      	add	r1, sp, #16
 8003090:	f000 f9d4 	bl	800343c <_printf_i>
 8003094:	e7eb      	b.n	800306e <_svfiprintf_r+0x1c2>
 8003096:	bf00      	nop
 8003098:	080040aa 	.word	0x080040aa
 800309c:	080040b0 	.word	0x080040b0
 80030a0:	080040b4 	.word	0x080040b4
 80030a4:	00000000 	.word	0x00000000
 80030a8:	08002df5 	.word	0x08002df5

080030ac <__sfputc_r>:
 80030ac:	6893      	ldr	r3, [r2, #8]
 80030ae:	b410      	push	{r4}
 80030b0:	3b01      	subs	r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	6093      	str	r3, [r2, #8]
 80030b6:	da07      	bge.n	80030c8 <__sfputc_r+0x1c>
 80030b8:	6994      	ldr	r4, [r2, #24]
 80030ba:	42a3      	cmp	r3, r4
 80030bc:	db01      	blt.n	80030c2 <__sfputc_r+0x16>
 80030be:	290a      	cmp	r1, #10
 80030c0:	d102      	bne.n	80030c8 <__sfputc_r+0x1c>
 80030c2:	bc10      	pop	{r4}
 80030c4:	f000 baf0 	b.w	80036a8 <__swbuf_r>
 80030c8:	6813      	ldr	r3, [r2, #0]
 80030ca:	1c58      	adds	r0, r3, #1
 80030cc:	6010      	str	r0, [r2, #0]
 80030ce:	7019      	strb	r1, [r3, #0]
 80030d0:	4608      	mov	r0, r1
 80030d2:	bc10      	pop	{r4}
 80030d4:	4770      	bx	lr

080030d6 <__sfputs_r>:
 80030d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d8:	4606      	mov	r6, r0
 80030da:	460f      	mov	r7, r1
 80030dc:	4614      	mov	r4, r2
 80030de:	18d5      	adds	r5, r2, r3
 80030e0:	42ac      	cmp	r4, r5
 80030e2:	d101      	bne.n	80030e8 <__sfputs_r+0x12>
 80030e4:	2000      	movs	r0, #0
 80030e6:	e007      	b.n	80030f8 <__sfputs_r+0x22>
 80030e8:	463a      	mov	r2, r7
 80030ea:	4630      	mov	r0, r6
 80030ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030f0:	f7ff ffdc 	bl	80030ac <__sfputc_r>
 80030f4:	1c43      	adds	r3, r0, #1
 80030f6:	d1f3      	bne.n	80030e0 <__sfputs_r+0xa>
 80030f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080030fc <_vfiprintf_r>:
 80030fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003100:	460d      	mov	r5, r1
 8003102:	4614      	mov	r4, r2
 8003104:	4698      	mov	r8, r3
 8003106:	4606      	mov	r6, r0
 8003108:	b09d      	sub	sp, #116	; 0x74
 800310a:	b118      	cbz	r0, 8003114 <_vfiprintf_r+0x18>
 800310c:	6983      	ldr	r3, [r0, #24]
 800310e:	b90b      	cbnz	r3, 8003114 <_vfiprintf_r+0x18>
 8003110:	f000 fca8 	bl	8003a64 <__sinit>
 8003114:	4b89      	ldr	r3, [pc, #548]	; (800333c <_vfiprintf_r+0x240>)
 8003116:	429d      	cmp	r5, r3
 8003118:	d11b      	bne.n	8003152 <_vfiprintf_r+0x56>
 800311a:	6875      	ldr	r5, [r6, #4]
 800311c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800311e:	07d9      	lsls	r1, r3, #31
 8003120:	d405      	bmi.n	800312e <_vfiprintf_r+0x32>
 8003122:	89ab      	ldrh	r3, [r5, #12]
 8003124:	059a      	lsls	r2, r3, #22
 8003126:	d402      	bmi.n	800312e <_vfiprintf_r+0x32>
 8003128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800312a:	f000 fd39 	bl	8003ba0 <__retarget_lock_acquire_recursive>
 800312e:	89ab      	ldrh	r3, [r5, #12]
 8003130:	071b      	lsls	r3, r3, #28
 8003132:	d501      	bpl.n	8003138 <_vfiprintf_r+0x3c>
 8003134:	692b      	ldr	r3, [r5, #16]
 8003136:	b9eb      	cbnz	r3, 8003174 <_vfiprintf_r+0x78>
 8003138:	4629      	mov	r1, r5
 800313a:	4630      	mov	r0, r6
 800313c:	f000 fb06 	bl	800374c <__swsetup_r>
 8003140:	b1c0      	cbz	r0, 8003174 <_vfiprintf_r+0x78>
 8003142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003144:	07dc      	lsls	r4, r3, #31
 8003146:	d50e      	bpl.n	8003166 <_vfiprintf_r+0x6a>
 8003148:	f04f 30ff 	mov.w	r0, #4294967295
 800314c:	b01d      	add	sp, #116	; 0x74
 800314e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003152:	4b7b      	ldr	r3, [pc, #492]	; (8003340 <_vfiprintf_r+0x244>)
 8003154:	429d      	cmp	r5, r3
 8003156:	d101      	bne.n	800315c <_vfiprintf_r+0x60>
 8003158:	68b5      	ldr	r5, [r6, #8]
 800315a:	e7df      	b.n	800311c <_vfiprintf_r+0x20>
 800315c:	4b79      	ldr	r3, [pc, #484]	; (8003344 <_vfiprintf_r+0x248>)
 800315e:	429d      	cmp	r5, r3
 8003160:	bf08      	it	eq
 8003162:	68f5      	ldreq	r5, [r6, #12]
 8003164:	e7da      	b.n	800311c <_vfiprintf_r+0x20>
 8003166:	89ab      	ldrh	r3, [r5, #12]
 8003168:	0598      	lsls	r0, r3, #22
 800316a:	d4ed      	bmi.n	8003148 <_vfiprintf_r+0x4c>
 800316c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800316e:	f000 fd18 	bl	8003ba2 <__retarget_lock_release_recursive>
 8003172:	e7e9      	b.n	8003148 <_vfiprintf_r+0x4c>
 8003174:	2300      	movs	r3, #0
 8003176:	9309      	str	r3, [sp, #36]	; 0x24
 8003178:	2320      	movs	r3, #32
 800317a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800317e:	2330      	movs	r3, #48	; 0x30
 8003180:	f04f 0901 	mov.w	r9, #1
 8003184:	f8cd 800c 	str.w	r8, [sp, #12]
 8003188:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003348 <_vfiprintf_r+0x24c>
 800318c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003190:	4623      	mov	r3, r4
 8003192:	469a      	mov	sl, r3
 8003194:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003198:	b10a      	cbz	r2, 800319e <_vfiprintf_r+0xa2>
 800319a:	2a25      	cmp	r2, #37	; 0x25
 800319c:	d1f9      	bne.n	8003192 <_vfiprintf_r+0x96>
 800319e:	ebba 0b04 	subs.w	fp, sl, r4
 80031a2:	d00b      	beq.n	80031bc <_vfiprintf_r+0xc0>
 80031a4:	465b      	mov	r3, fp
 80031a6:	4622      	mov	r2, r4
 80031a8:	4629      	mov	r1, r5
 80031aa:	4630      	mov	r0, r6
 80031ac:	f7ff ff93 	bl	80030d6 <__sfputs_r>
 80031b0:	3001      	adds	r0, #1
 80031b2:	f000 80aa 	beq.w	800330a <_vfiprintf_r+0x20e>
 80031b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031b8:	445a      	add	r2, fp
 80031ba:	9209      	str	r2, [sp, #36]	; 0x24
 80031bc:	f89a 3000 	ldrb.w	r3, [sl]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80a2 	beq.w	800330a <_vfiprintf_r+0x20e>
 80031c6:	2300      	movs	r3, #0
 80031c8:	f04f 32ff 	mov.w	r2, #4294967295
 80031cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031d0:	f10a 0a01 	add.w	sl, sl, #1
 80031d4:	9304      	str	r3, [sp, #16]
 80031d6:	9307      	str	r3, [sp, #28]
 80031d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031dc:	931a      	str	r3, [sp, #104]	; 0x68
 80031de:	4654      	mov	r4, sl
 80031e0:	2205      	movs	r2, #5
 80031e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031e6:	4858      	ldr	r0, [pc, #352]	; (8003348 <_vfiprintf_r+0x24c>)
 80031e8:	f000 fd42 	bl	8003c70 <memchr>
 80031ec:	9a04      	ldr	r2, [sp, #16]
 80031ee:	b9d8      	cbnz	r0, 8003228 <_vfiprintf_r+0x12c>
 80031f0:	06d1      	lsls	r1, r2, #27
 80031f2:	bf44      	itt	mi
 80031f4:	2320      	movmi	r3, #32
 80031f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031fa:	0713      	lsls	r3, r2, #28
 80031fc:	bf44      	itt	mi
 80031fe:	232b      	movmi	r3, #43	; 0x2b
 8003200:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003204:	f89a 3000 	ldrb.w	r3, [sl]
 8003208:	2b2a      	cmp	r3, #42	; 0x2a
 800320a:	d015      	beq.n	8003238 <_vfiprintf_r+0x13c>
 800320c:	4654      	mov	r4, sl
 800320e:	2000      	movs	r0, #0
 8003210:	f04f 0c0a 	mov.w	ip, #10
 8003214:	9a07      	ldr	r2, [sp, #28]
 8003216:	4621      	mov	r1, r4
 8003218:	f811 3b01 	ldrb.w	r3, [r1], #1
 800321c:	3b30      	subs	r3, #48	; 0x30
 800321e:	2b09      	cmp	r3, #9
 8003220:	d94e      	bls.n	80032c0 <_vfiprintf_r+0x1c4>
 8003222:	b1b0      	cbz	r0, 8003252 <_vfiprintf_r+0x156>
 8003224:	9207      	str	r2, [sp, #28]
 8003226:	e014      	b.n	8003252 <_vfiprintf_r+0x156>
 8003228:	eba0 0308 	sub.w	r3, r0, r8
 800322c:	fa09 f303 	lsl.w	r3, r9, r3
 8003230:	4313      	orrs	r3, r2
 8003232:	46a2      	mov	sl, r4
 8003234:	9304      	str	r3, [sp, #16]
 8003236:	e7d2      	b.n	80031de <_vfiprintf_r+0xe2>
 8003238:	9b03      	ldr	r3, [sp, #12]
 800323a:	1d19      	adds	r1, r3, #4
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	9103      	str	r1, [sp, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	bfbb      	ittet	lt
 8003244:	425b      	neglt	r3, r3
 8003246:	f042 0202 	orrlt.w	r2, r2, #2
 800324a:	9307      	strge	r3, [sp, #28]
 800324c:	9307      	strlt	r3, [sp, #28]
 800324e:	bfb8      	it	lt
 8003250:	9204      	strlt	r2, [sp, #16]
 8003252:	7823      	ldrb	r3, [r4, #0]
 8003254:	2b2e      	cmp	r3, #46	; 0x2e
 8003256:	d10c      	bne.n	8003272 <_vfiprintf_r+0x176>
 8003258:	7863      	ldrb	r3, [r4, #1]
 800325a:	2b2a      	cmp	r3, #42	; 0x2a
 800325c:	d135      	bne.n	80032ca <_vfiprintf_r+0x1ce>
 800325e:	9b03      	ldr	r3, [sp, #12]
 8003260:	3402      	adds	r4, #2
 8003262:	1d1a      	adds	r2, r3, #4
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	9203      	str	r2, [sp, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	bfb8      	it	lt
 800326c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003270:	9305      	str	r3, [sp, #20]
 8003272:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800334c <_vfiprintf_r+0x250>
 8003276:	2203      	movs	r2, #3
 8003278:	4650      	mov	r0, sl
 800327a:	7821      	ldrb	r1, [r4, #0]
 800327c:	f000 fcf8 	bl	8003c70 <memchr>
 8003280:	b140      	cbz	r0, 8003294 <_vfiprintf_r+0x198>
 8003282:	2340      	movs	r3, #64	; 0x40
 8003284:	eba0 000a 	sub.w	r0, r0, sl
 8003288:	fa03 f000 	lsl.w	r0, r3, r0
 800328c:	9b04      	ldr	r3, [sp, #16]
 800328e:	3401      	adds	r4, #1
 8003290:	4303      	orrs	r3, r0
 8003292:	9304      	str	r3, [sp, #16]
 8003294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003298:	2206      	movs	r2, #6
 800329a:	482d      	ldr	r0, [pc, #180]	; (8003350 <_vfiprintf_r+0x254>)
 800329c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032a0:	f000 fce6 	bl	8003c70 <memchr>
 80032a4:	2800      	cmp	r0, #0
 80032a6:	d03f      	beq.n	8003328 <_vfiprintf_r+0x22c>
 80032a8:	4b2a      	ldr	r3, [pc, #168]	; (8003354 <_vfiprintf_r+0x258>)
 80032aa:	bb1b      	cbnz	r3, 80032f4 <_vfiprintf_r+0x1f8>
 80032ac:	9b03      	ldr	r3, [sp, #12]
 80032ae:	3307      	adds	r3, #7
 80032b0:	f023 0307 	bic.w	r3, r3, #7
 80032b4:	3308      	adds	r3, #8
 80032b6:	9303      	str	r3, [sp, #12]
 80032b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032ba:	443b      	add	r3, r7
 80032bc:	9309      	str	r3, [sp, #36]	; 0x24
 80032be:	e767      	b.n	8003190 <_vfiprintf_r+0x94>
 80032c0:	460c      	mov	r4, r1
 80032c2:	2001      	movs	r0, #1
 80032c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80032c8:	e7a5      	b.n	8003216 <_vfiprintf_r+0x11a>
 80032ca:	2300      	movs	r3, #0
 80032cc:	f04f 0c0a 	mov.w	ip, #10
 80032d0:	4619      	mov	r1, r3
 80032d2:	3401      	adds	r4, #1
 80032d4:	9305      	str	r3, [sp, #20]
 80032d6:	4620      	mov	r0, r4
 80032d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032dc:	3a30      	subs	r2, #48	; 0x30
 80032de:	2a09      	cmp	r2, #9
 80032e0:	d903      	bls.n	80032ea <_vfiprintf_r+0x1ee>
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0c5      	beq.n	8003272 <_vfiprintf_r+0x176>
 80032e6:	9105      	str	r1, [sp, #20]
 80032e8:	e7c3      	b.n	8003272 <_vfiprintf_r+0x176>
 80032ea:	4604      	mov	r4, r0
 80032ec:	2301      	movs	r3, #1
 80032ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80032f2:	e7f0      	b.n	80032d6 <_vfiprintf_r+0x1da>
 80032f4:	ab03      	add	r3, sp, #12
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	462a      	mov	r2, r5
 80032fa:	4630      	mov	r0, r6
 80032fc:	4b16      	ldr	r3, [pc, #88]	; (8003358 <_vfiprintf_r+0x25c>)
 80032fe:	a904      	add	r1, sp, #16
 8003300:	f3af 8000 	nop.w
 8003304:	4607      	mov	r7, r0
 8003306:	1c78      	adds	r0, r7, #1
 8003308:	d1d6      	bne.n	80032b8 <_vfiprintf_r+0x1bc>
 800330a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800330c:	07d9      	lsls	r1, r3, #31
 800330e:	d405      	bmi.n	800331c <_vfiprintf_r+0x220>
 8003310:	89ab      	ldrh	r3, [r5, #12]
 8003312:	059a      	lsls	r2, r3, #22
 8003314:	d402      	bmi.n	800331c <_vfiprintf_r+0x220>
 8003316:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003318:	f000 fc43 	bl	8003ba2 <__retarget_lock_release_recursive>
 800331c:	89ab      	ldrh	r3, [r5, #12]
 800331e:	065b      	lsls	r3, r3, #25
 8003320:	f53f af12 	bmi.w	8003148 <_vfiprintf_r+0x4c>
 8003324:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003326:	e711      	b.n	800314c <_vfiprintf_r+0x50>
 8003328:	ab03      	add	r3, sp, #12
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	462a      	mov	r2, r5
 800332e:	4630      	mov	r0, r6
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <_vfiprintf_r+0x25c>)
 8003332:	a904      	add	r1, sp, #16
 8003334:	f000 f882 	bl	800343c <_printf_i>
 8003338:	e7e4      	b.n	8003304 <_vfiprintf_r+0x208>
 800333a:	bf00      	nop
 800333c:	08004100 	.word	0x08004100
 8003340:	08004120 	.word	0x08004120
 8003344:	080040e0 	.word	0x080040e0
 8003348:	080040aa 	.word	0x080040aa
 800334c:	080040b0 	.word	0x080040b0
 8003350:	080040b4 	.word	0x080040b4
 8003354:	00000000 	.word	0x00000000
 8003358:	080030d7 	.word	0x080030d7

0800335c <_printf_common>:
 800335c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003360:	4616      	mov	r6, r2
 8003362:	4699      	mov	r9, r3
 8003364:	688a      	ldr	r2, [r1, #8]
 8003366:	690b      	ldr	r3, [r1, #16]
 8003368:	4607      	mov	r7, r0
 800336a:	4293      	cmp	r3, r2
 800336c:	bfb8      	it	lt
 800336e:	4613      	movlt	r3, r2
 8003370:	6033      	str	r3, [r6, #0]
 8003372:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003376:	460c      	mov	r4, r1
 8003378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800337c:	b10a      	cbz	r2, 8003382 <_printf_common+0x26>
 800337e:	3301      	adds	r3, #1
 8003380:	6033      	str	r3, [r6, #0]
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	0699      	lsls	r1, r3, #26
 8003386:	bf42      	ittt	mi
 8003388:	6833      	ldrmi	r3, [r6, #0]
 800338a:	3302      	addmi	r3, #2
 800338c:	6033      	strmi	r3, [r6, #0]
 800338e:	6825      	ldr	r5, [r4, #0]
 8003390:	f015 0506 	ands.w	r5, r5, #6
 8003394:	d106      	bne.n	80033a4 <_printf_common+0x48>
 8003396:	f104 0a19 	add.w	sl, r4, #25
 800339a:	68e3      	ldr	r3, [r4, #12]
 800339c:	6832      	ldr	r2, [r6, #0]
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	42ab      	cmp	r3, r5
 80033a2:	dc28      	bgt.n	80033f6 <_printf_common+0x9a>
 80033a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033a8:	1e13      	subs	r3, r2, #0
 80033aa:	6822      	ldr	r2, [r4, #0]
 80033ac:	bf18      	it	ne
 80033ae:	2301      	movne	r3, #1
 80033b0:	0692      	lsls	r2, r2, #26
 80033b2:	d42d      	bmi.n	8003410 <_printf_common+0xb4>
 80033b4:	4649      	mov	r1, r9
 80033b6:	4638      	mov	r0, r7
 80033b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033bc:	47c0      	blx	r8
 80033be:	3001      	adds	r0, #1
 80033c0:	d020      	beq.n	8003404 <_printf_common+0xa8>
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	68e5      	ldr	r5, [r4, #12]
 80033c6:	f003 0306 	and.w	r3, r3, #6
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	bf18      	it	ne
 80033ce:	2500      	movne	r5, #0
 80033d0:	6832      	ldr	r2, [r6, #0]
 80033d2:	f04f 0600 	mov.w	r6, #0
 80033d6:	68a3      	ldr	r3, [r4, #8]
 80033d8:	bf08      	it	eq
 80033da:	1aad      	subeq	r5, r5, r2
 80033dc:	6922      	ldr	r2, [r4, #16]
 80033de:	bf08      	it	eq
 80033e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033e4:	4293      	cmp	r3, r2
 80033e6:	bfc4      	itt	gt
 80033e8:	1a9b      	subgt	r3, r3, r2
 80033ea:	18ed      	addgt	r5, r5, r3
 80033ec:	341a      	adds	r4, #26
 80033ee:	42b5      	cmp	r5, r6
 80033f0:	d11a      	bne.n	8003428 <_printf_common+0xcc>
 80033f2:	2000      	movs	r0, #0
 80033f4:	e008      	b.n	8003408 <_printf_common+0xac>
 80033f6:	2301      	movs	r3, #1
 80033f8:	4652      	mov	r2, sl
 80033fa:	4649      	mov	r1, r9
 80033fc:	4638      	mov	r0, r7
 80033fe:	47c0      	blx	r8
 8003400:	3001      	adds	r0, #1
 8003402:	d103      	bne.n	800340c <_printf_common+0xb0>
 8003404:	f04f 30ff 	mov.w	r0, #4294967295
 8003408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800340c:	3501      	adds	r5, #1
 800340e:	e7c4      	b.n	800339a <_printf_common+0x3e>
 8003410:	2030      	movs	r0, #48	; 0x30
 8003412:	18e1      	adds	r1, r4, r3
 8003414:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800341e:	4422      	add	r2, r4
 8003420:	3302      	adds	r3, #2
 8003422:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003426:	e7c5      	b.n	80033b4 <_printf_common+0x58>
 8003428:	2301      	movs	r3, #1
 800342a:	4622      	mov	r2, r4
 800342c:	4649      	mov	r1, r9
 800342e:	4638      	mov	r0, r7
 8003430:	47c0      	blx	r8
 8003432:	3001      	adds	r0, #1
 8003434:	d0e6      	beq.n	8003404 <_printf_common+0xa8>
 8003436:	3601      	adds	r6, #1
 8003438:	e7d9      	b.n	80033ee <_printf_common+0x92>
	...

0800343c <_printf_i>:
 800343c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003440:	7e0f      	ldrb	r7, [r1, #24]
 8003442:	4691      	mov	r9, r2
 8003444:	2f78      	cmp	r7, #120	; 0x78
 8003446:	4680      	mov	r8, r0
 8003448:	460c      	mov	r4, r1
 800344a:	469a      	mov	sl, r3
 800344c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800344e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003452:	d807      	bhi.n	8003464 <_printf_i+0x28>
 8003454:	2f62      	cmp	r7, #98	; 0x62
 8003456:	d80a      	bhi.n	800346e <_printf_i+0x32>
 8003458:	2f00      	cmp	r7, #0
 800345a:	f000 80d9 	beq.w	8003610 <_printf_i+0x1d4>
 800345e:	2f58      	cmp	r7, #88	; 0x58
 8003460:	f000 80a4 	beq.w	80035ac <_printf_i+0x170>
 8003464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003468:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800346c:	e03a      	b.n	80034e4 <_printf_i+0xa8>
 800346e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003472:	2b15      	cmp	r3, #21
 8003474:	d8f6      	bhi.n	8003464 <_printf_i+0x28>
 8003476:	a101      	add	r1, pc, #4	; (adr r1, 800347c <_printf_i+0x40>)
 8003478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800347c:	080034d5 	.word	0x080034d5
 8003480:	080034e9 	.word	0x080034e9
 8003484:	08003465 	.word	0x08003465
 8003488:	08003465 	.word	0x08003465
 800348c:	08003465 	.word	0x08003465
 8003490:	08003465 	.word	0x08003465
 8003494:	080034e9 	.word	0x080034e9
 8003498:	08003465 	.word	0x08003465
 800349c:	08003465 	.word	0x08003465
 80034a0:	08003465 	.word	0x08003465
 80034a4:	08003465 	.word	0x08003465
 80034a8:	080035f7 	.word	0x080035f7
 80034ac:	08003519 	.word	0x08003519
 80034b0:	080035d9 	.word	0x080035d9
 80034b4:	08003465 	.word	0x08003465
 80034b8:	08003465 	.word	0x08003465
 80034bc:	08003619 	.word	0x08003619
 80034c0:	08003465 	.word	0x08003465
 80034c4:	08003519 	.word	0x08003519
 80034c8:	08003465 	.word	0x08003465
 80034cc:	08003465 	.word	0x08003465
 80034d0:	080035e1 	.word	0x080035e1
 80034d4:	682b      	ldr	r3, [r5, #0]
 80034d6:	1d1a      	adds	r2, r3, #4
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	602a      	str	r2, [r5, #0]
 80034dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0a4      	b.n	8003632 <_printf_i+0x1f6>
 80034e8:	6820      	ldr	r0, [r4, #0]
 80034ea:	6829      	ldr	r1, [r5, #0]
 80034ec:	0606      	lsls	r6, r0, #24
 80034ee:	f101 0304 	add.w	r3, r1, #4
 80034f2:	d50a      	bpl.n	800350a <_printf_i+0xce>
 80034f4:	680e      	ldr	r6, [r1, #0]
 80034f6:	602b      	str	r3, [r5, #0]
 80034f8:	2e00      	cmp	r6, #0
 80034fa:	da03      	bge.n	8003504 <_printf_i+0xc8>
 80034fc:	232d      	movs	r3, #45	; 0x2d
 80034fe:	4276      	negs	r6, r6
 8003500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003504:	230a      	movs	r3, #10
 8003506:	485e      	ldr	r0, [pc, #376]	; (8003680 <_printf_i+0x244>)
 8003508:	e019      	b.n	800353e <_printf_i+0x102>
 800350a:	680e      	ldr	r6, [r1, #0]
 800350c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003510:	602b      	str	r3, [r5, #0]
 8003512:	bf18      	it	ne
 8003514:	b236      	sxthne	r6, r6
 8003516:	e7ef      	b.n	80034f8 <_printf_i+0xbc>
 8003518:	682b      	ldr	r3, [r5, #0]
 800351a:	6820      	ldr	r0, [r4, #0]
 800351c:	1d19      	adds	r1, r3, #4
 800351e:	6029      	str	r1, [r5, #0]
 8003520:	0601      	lsls	r1, r0, #24
 8003522:	d501      	bpl.n	8003528 <_printf_i+0xec>
 8003524:	681e      	ldr	r6, [r3, #0]
 8003526:	e002      	b.n	800352e <_printf_i+0xf2>
 8003528:	0646      	lsls	r6, r0, #25
 800352a:	d5fb      	bpl.n	8003524 <_printf_i+0xe8>
 800352c:	881e      	ldrh	r6, [r3, #0]
 800352e:	2f6f      	cmp	r7, #111	; 0x6f
 8003530:	bf0c      	ite	eq
 8003532:	2308      	moveq	r3, #8
 8003534:	230a      	movne	r3, #10
 8003536:	4852      	ldr	r0, [pc, #328]	; (8003680 <_printf_i+0x244>)
 8003538:	2100      	movs	r1, #0
 800353a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800353e:	6865      	ldr	r5, [r4, #4]
 8003540:	2d00      	cmp	r5, #0
 8003542:	bfa8      	it	ge
 8003544:	6821      	ldrge	r1, [r4, #0]
 8003546:	60a5      	str	r5, [r4, #8]
 8003548:	bfa4      	itt	ge
 800354a:	f021 0104 	bicge.w	r1, r1, #4
 800354e:	6021      	strge	r1, [r4, #0]
 8003550:	b90e      	cbnz	r6, 8003556 <_printf_i+0x11a>
 8003552:	2d00      	cmp	r5, #0
 8003554:	d04d      	beq.n	80035f2 <_printf_i+0x1b6>
 8003556:	4615      	mov	r5, r2
 8003558:	fbb6 f1f3 	udiv	r1, r6, r3
 800355c:	fb03 6711 	mls	r7, r3, r1, r6
 8003560:	5dc7      	ldrb	r7, [r0, r7]
 8003562:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003566:	4637      	mov	r7, r6
 8003568:	42bb      	cmp	r3, r7
 800356a:	460e      	mov	r6, r1
 800356c:	d9f4      	bls.n	8003558 <_printf_i+0x11c>
 800356e:	2b08      	cmp	r3, #8
 8003570:	d10b      	bne.n	800358a <_printf_i+0x14e>
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	07de      	lsls	r6, r3, #31
 8003576:	d508      	bpl.n	800358a <_printf_i+0x14e>
 8003578:	6923      	ldr	r3, [r4, #16]
 800357a:	6861      	ldr	r1, [r4, #4]
 800357c:	4299      	cmp	r1, r3
 800357e:	bfde      	ittt	le
 8003580:	2330      	movle	r3, #48	; 0x30
 8003582:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003586:	f105 35ff 	addle.w	r5, r5, #4294967295
 800358a:	1b52      	subs	r2, r2, r5
 800358c:	6122      	str	r2, [r4, #16]
 800358e:	464b      	mov	r3, r9
 8003590:	4621      	mov	r1, r4
 8003592:	4640      	mov	r0, r8
 8003594:	f8cd a000 	str.w	sl, [sp]
 8003598:	aa03      	add	r2, sp, #12
 800359a:	f7ff fedf 	bl	800335c <_printf_common>
 800359e:	3001      	adds	r0, #1
 80035a0:	d14c      	bne.n	800363c <_printf_i+0x200>
 80035a2:	f04f 30ff 	mov.w	r0, #4294967295
 80035a6:	b004      	add	sp, #16
 80035a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ac:	4834      	ldr	r0, [pc, #208]	; (8003680 <_printf_i+0x244>)
 80035ae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80035b2:	6829      	ldr	r1, [r5, #0]
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	f851 6b04 	ldr.w	r6, [r1], #4
 80035ba:	6029      	str	r1, [r5, #0]
 80035bc:	061d      	lsls	r5, r3, #24
 80035be:	d514      	bpl.n	80035ea <_printf_i+0x1ae>
 80035c0:	07df      	lsls	r7, r3, #31
 80035c2:	bf44      	itt	mi
 80035c4:	f043 0320 	orrmi.w	r3, r3, #32
 80035c8:	6023      	strmi	r3, [r4, #0]
 80035ca:	b91e      	cbnz	r6, 80035d4 <_printf_i+0x198>
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	f023 0320 	bic.w	r3, r3, #32
 80035d2:	6023      	str	r3, [r4, #0]
 80035d4:	2310      	movs	r3, #16
 80035d6:	e7af      	b.n	8003538 <_printf_i+0xfc>
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	f043 0320 	orr.w	r3, r3, #32
 80035de:	6023      	str	r3, [r4, #0]
 80035e0:	2378      	movs	r3, #120	; 0x78
 80035e2:	4828      	ldr	r0, [pc, #160]	; (8003684 <_printf_i+0x248>)
 80035e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035e8:	e7e3      	b.n	80035b2 <_printf_i+0x176>
 80035ea:	0659      	lsls	r1, r3, #25
 80035ec:	bf48      	it	mi
 80035ee:	b2b6      	uxthmi	r6, r6
 80035f0:	e7e6      	b.n	80035c0 <_printf_i+0x184>
 80035f2:	4615      	mov	r5, r2
 80035f4:	e7bb      	b.n	800356e <_printf_i+0x132>
 80035f6:	682b      	ldr	r3, [r5, #0]
 80035f8:	6826      	ldr	r6, [r4, #0]
 80035fa:	1d18      	adds	r0, r3, #4
 80035fc:	6961      	ldr	r1, [r4, #20]
 80035fe:	6028      	str	r0, [r5, #0]
 8003600:	0635      	lsls	r5, r6, #24
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	d501      	bpl.n	800360a <_printf_i+0x1ce>
 8003606:	6019      	str	r1, [r3, #0]
 8003608:	e002      	b.n	8003610 <_printf_i+0x1d4>
 800360a:	0670      	lsls	r0, r6, #25
 800360c:	d5fb      	bpl.n	8003606 <_printf_i+0x1ca>
 800360e:	8019      	strh	r1, [r3, #0]
 8003610:	2300      	movs	r3, #0
 8003612:	4615      	mov	r5, r2
 8003614:	6123      	str	r3, [r4, #16]
 8003616:	e7ba      	b.n	800358e <_printf_i+0x152>
 8003618:	682b      	ldr	r3, [r5, #0]
 800361a:	2100      	movs	r1, #0
 800361c:	1d1a      	adds	r2, r3, #4
 800361e:	602a      	str	r2, [r5, #0]
 8003620:	681d      	ldr	r5, [r3, #0]
 8003622:	6862      	ldr	r2, [r4, #4]
 8003624:	4628      	mov	r0, r5
 8003626:	f000 fb23 	bl	8003c70 <memchr>
 800362a:	b108      	cbz	r0, 8003630 <_printf_i+0x1f4>
 800362c:	1b40      	subs	r0, r0, r5
 800362e:	6060      	str	r0, [r4, #4]
 8003630:	6863      	ldr	r3, [r4, #4]
 8003632:	6123      	str	r3, [r4, #16]
 8003634:	2300      	movs	r3, #0
 8003636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800363a:	e7a8      	b.n	800358e <_printf_i+0x152>
 800363c:	462a      	mov	r2, r5
 800363e:	4649      	mov	r1, r9
 8003640:	4640      	mov	r0, r8
 8003642:	6923      	ldr	r3, [r4, #16]
 8003644:	47d0      	blx	sl
 8003646:	3001      	adds	r0, #1
 8003648:	d0ab      	beq.n	80035a2 <_printf_i+0x166>
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	079b      	lsls	r3, r3, #30
 800364e:	d413      	bmi.n	8003678 <_printf_i+0x23c>
 8003650:	68e0      	ldr	r0, [r4, #12]
 8003652:	9b03      	ldr	r3, [sp, #12]
 8003654:	4298      	cmp	r0, r3
 8003656:	bfb8      	it	lt
 8003658:	4618      	movlt	r0, r3
 800365a:	e7a4      	b.n	80035a6 <_printf_i+0x16a>
 800365c:	2301      	movs	r3, #1
 800365e:	4632      	mov	r2, r6
 8003660:	4649      	mov	r1, r9
 8003662:	4640      	mov	r0, r8
 8003664:	47d0      	blx	sl
 8003666:	3001      	adds	r0, #1
 8003668:	d09b      	beq.n	80035a2 <_printf_i+0x166>
 800366a:	3501      	adds	r5, #1
 800366c:	68e3      	ldr	r3, [r4, #12]
 800366e:	9903      	ldr	r1, [sp, #12]
 8003670:	1a5b      	subs	r3, r3, r1
 8003672:	42ab      	cmp	r3, r5
 8003674:	dcf2      	bgt.n	800365c <_printf_i+0x220>
 8003676:	e7eb      	b.n	8003650 <_printf_i+0x214>
 8003678:	2500      	movs	r5, #0
 800367a:	f104 0619 	add.w	r6, r4, #25
 800367e:	e7f5      	b.n	800366c <_printf_i+0x230>
 8003680:	080040bb 	.word	0x080040bb
 8003684:	080040cc 	.word	0x080040cc

08003688 <_sbrk_r>:
 8003688:	b538      	push	{r3, r4, r5, lr}
 800368a:	2300      	movs	r3, #0
 800368c:	4d05      	ldr	r5, [pc, #20]	; (80036a4 <_sbrk_r+0x1c>)
 800368e:	4604      	mov	r4, r0
 8003690:	4608      	mov	r0, r1
 8003692:	602b      	str	r3, [r5, #0]
 8003694:	f7fd fdd6 	bl	8001244 <_sbrk>
 8003698:	1c43      	adds	r3, r0, #1
 800369a:	d102      	bne.n	80036a2 <_sbrk_r+0x1a>
 800369c:	682b      	ldr	r3, [r5, #0]
 800369e:	b103      	cbz	r3, 80036a2 <_sbrk_r+0x1a>
 80036a0:	6023      	str	r3, [r4, #0]
 80036a2:	bd38      	pop	{r3, r4, r5, pc}
 80036a4:	20000334 	.word	0x20000334

080036a8 <__swbuf_r>:
 80036a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036aa:	460e      	mov	r6, r1
 80036ac:	4614      	mov	r4, r2
 80036ae:	4605      	mov	r5, r0
 80036b0:	b118      	cbz	r0, 80036ba <__swbuf_r+0x12>
 80036b2:	6983      	ldr	r3, [r0, #24]
 80036b4:	b90b      	cbnz	r3, 80036ba <__swbuf_r+0x12>
 80036b6:	f000 f9d5 	bl	8003a64 <__sinit>
 80036ba:	4b21      	ldr	r3, [pc, #132]	; (8003740 <__swbuf_r+0x98>)
 80036bc:	429c      	cmp	r4, r3
 80036be:	d12b      	bne.n	8003718 <__swbuf_r+0x70>
 80036c0:	686c      	ldr	r4, [r5, #4]
 80036c2:	69a3      	ldr	r3, [r4, #24]
 80036c4:	60a3      	str	r3, [r4, #8]
 80036c6:	89a3      	ldrh	r3, [r4, #12]
 80036c8:	071a      	lsls	r2, r3, #28
 80036ca:	d52f      	bpl.n	800372c <__swbuf_r+0x84>
 80036cc:	6923      	ldr	r3, [r4, #16]
 80036ce:	b36b      	cbz	r3, 800372c <__swbuf_r+0x84>
 80036d0:	6923      	ldr	r3, [r4, #16]
 80036d2:	6820      	ldr	r0, [r4, #0]
 80036d4:	b2f6      	uxtb	r6, r6
 80036d6:	1ac0      	subs	r0, r0, r3
 80036d8:	6963      	ldr	r3, [r4, #20]
 80036da:	4637      	mov	r7, r6
 80036dc:	4283      	cmp	r3, r0
 80036de:	dc04      	bgt.n	80036ea <__swbuf_r+0x42>
 80036e0:	4621      	mov	r1, r4
 80036e2:	4628      	mov	r0, r5
 80036e4:	f000 f92a 	bl	800393c <_fflush_r>
 80036e8:	bb30      	cbnz	r0, 8003738 <__swbuf_r+0x90>
 80036ea:	68a3      	ldr	r3, [r4, #8]
 80036ec:	3001      	adds	r0, #1
 80036ee:	3b01      	subs	r3, #1
 80036f0:	60a3      	str	r3, [r4, #8]
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	6022      	str	r2, [r4, #0]
 80036f8:	701e      	strb	r6, [r3, #0]
 80036fa:	6963      	ldr	r3, [r4, #20]
 80036fc:	4283      	cmp	r3, r0
 80036fe:	d004      	beq.n	800370a <__swbuf_r+0x62>
 8003700:	89a3      	ldrh	r3, [r4, #12]
 8003702:	07db      	lsls	r3, r3, #31
 8003704:	d506      	bpl.n	8003714 <__swbuf_r+0x6c>
 8003706:	2e0a      	cmp	r6, #10
 8003708:	d104      	bne.n	8003714 <__swbuf_r+0x6c>
 800370a:	4621      	mov	r1, r4
 800370c:	4628      	mov	r0, r5
 800370e:	f000 f915 	bl	800393c <_fflush_r>
 8003712:	b988      	cbnz	r0, 8003738 <__swbuf_r+0x90>
 8003714:	4638      	mov	r0, r7
 8003716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003718:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <__swbuf_r+0x9c>)
 800371a:	429c      	cmp	r4, r3
 800371c:	d101      	bne.n	8003722 <__swbuf_r+0x7a>
 800371e:	68ac      	ldr	r4, [r5, #8]
 8003720:	e7cf      	b.n	80036c2 <__swbuf_r+0x1a>
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <__swbuf_r+0xa0>)
 8003724:	429c      	cmp	r4, r3
 8003726:	bf08      	it	eq
 8003728:	68ec      	ldreq	r4, [r5, #12]
 800372a:	e7ca      	b.n	80036c2 <__swbuf_r+0x1a>
 800372c:	4621      	mov	r1, r4
 800372e:	4628      	mov	r0, r5
 8003730:	f000 f80c 	bl	800374c <__swsetup_r>
 8003734:	2800      	cmp	r0, #0
 8003736:	d0cb      	beq.n	80036d0 <__swbuf_r+0x28>
 8003738:	f04f 37ff 	mov.w	r7, #4294967295
 800373c:	e7ea      	b.n	8003714 <__swbuf_r+0x6c>
 800373e:	bf00      	nop
 8003740:	08004100 	.word	0x08004100
 8003744:	08004120 	.word	0x08004120
 8003748:	080040e0 	.word	0x080040e0

0800374c <__swsetup_r>:
 800374c:	4b32      	ldr	r3, [pc, #200]	; (8003818 <__swsetup_r+0xcc>)
 800374e:	b570      	push	{r4, r5, r6, lr}
 8003750:	681d      	ldr	r5, [r3, #0]
 8003752:	4606      	mov	r6, r0
 8003754:	460c      	mov	r4, r1
 8003756:	b125      	cbz	r5, 8003762 <__swsetup_r+0x16>
 8003758:	69ab      	ldr	r3, [r5, #24]
 800375a:	b913      	cbnz	r3, 8003762 <__swsetup_r+0x16>
 800375c:	4628      	mov	r0, r5
 800375e:	f000 f981 	bl	8003a64 <__sinit>
 8003762:	4b2e      	ldr	r3, [pc, #184]	; (800381c <__swsetup_r+0xd0>)
 8003764:	429c      	cmp	r4, r3
 8003766:	d10f      	bne.n	8003788 <__swsetup_r+0x3c>
 8003768:	686c      	ldr	r4, [r5, #4]
 800376a:	89a3      	ldrh	r3, [r4, #12]
 800376c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003770:	0719      	lsls	r1, r3, #28
 8003772:	d42c      	bmi.n	80037ce <__swsetup_r+0x82>
 8003774:	06dd      	lsls	r5, r3, #27
 8003776:	d411      	bmi.n	800379c <__swsetup_r+0x50>
 8003778:	2309      	movs	r3, #9
 800377a:	6033      	str	r3, [r6, #0]
 800377c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003780:	f04f 30ff 	mov.w	r0, #4294967295
 8003784:	81a3      	strh	r3, [r4, #12]
 8003786:	e03e      	b.n	8003806 <__swsetup_r+0xba>
 8003788:	4b25      	ldr	r3, [pc, #148]	; (8003820 <__swsetup_r+0xd4>)
 800378a:	429c      	cmp	r4, r3
 800378c:	d101      	bne.n	8003792 <__swsetup_r+0x46>
 800378e:	68ac      	ldr	r4, [r5, #8]
 8003790:	e7eb      	b.n	800376a <__swsetup_r+0x1e>
 8003792:	4b24      	ldr	r3, [pc, #144]	; (8003824 <__swsetup_r+0xd8>)
 8003794:	429c      	cmp	r4, r3
 8003796:	bf08      	it	eq
 8003798:	68ec      	ldreq	r4, [r5, #12]
 800379a:	e7e6      	b.n	800376a <__swsetup_r+0x1e>
 800379c:	0758      	lsls	r0, r3, #29
 800379e:	d512      	bpl.n	80037c6 <__swsetup_r+0x7a>
 80037a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037a2:	b141      	cbz	r1, 80037b6 <__swsetup_r+0x6a>
 80037a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037a8:	4299      	cmp	r1, r3
 80037aa:	d002      	beq.n	80037b2 <__swsetup_r+0x66>
 80037ac:	4630      	mov	r0, r6
 80037ae:	f7ff fa45 	bl	8002c3c <_free_r>
 80037b2:	2300      	movs	r3, #0
 80037b4:	6363      	str	r3, [r4, #52]	; 0x34
 80037b6:	89a3      	ldrh	r3, [r4, #12]
 80037b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80037bc:	81a3      	strh	r3, [r4, #12]
 80037be:	2300      	movs	r3, #0
 80037c0:	6063      	str	r3, [r4, #4]
 80037c2:	6923      	ldr	r3, [r4, #16]
 80037c4:	6023      	str	r3, [r4, #0]
 80037c6:	89a3      	ldrh	r3, [r4, #12]
 80037c8:	f043 0308 	orr.w	r3, r3, #8
 80037cc:	81a3      	strh	r3, [r4, #12]
 80037ce:	6923      	ldr	r3, [r4, #16]
 80037d0:	b94b      	cbnz	r3, 80037e6 <__swsetup_r+0x9a>
 80037d2:	89a3      	ldrh	r3, [r4, #12]
 80037d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80037d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037dc:	d003      	beq.n	80037e6 <__swsetup_r+0x9a>
 80037de:	4621      	mov	r1, r4
 80037e0:	4630      	mov	r0, r6
 80037e2:	f000 fa05 	bl	8003bf0 <__smakebuf_r>
 80037e6:	89a0      	ldrh	r0, [r4, #12]
 80037e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037ec:	f010 0301 	ands.w	r3, r0, #1
 80037f0:	d00a      	beq.n	8003808 <__swsetup_r+0xbc>
 80037f2:	2300      	movs	r3, #0
 80037f4:	60a3      	str	r3, [r4, #8]
 80037f6:	6963      	ldr	r3, [r4, #20]
 80037f8:	425b      	negs	r3, r3
 80037fa:	61a3      	str	r3, [r4, #24]
 80037fc:	6923      	ldr	r3, [r4, #16]
 80037fe:	b943      	cbnz	r3, 8003812 <__swsetup_r+0xc6>
 8003800:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003804:	d1ba      	bne.n	800377c <__swsetup_r+0x30>
 8003806:	bd70      	pop	{r4, r5, r6, pc}
 8003808:	0781      	lsls	r1, r0, #30
 800380a:	bf58      	it	pl
 800380c:	6963      	ldrpl	r3, [r4, #20]
 800380e:	60a3      	str	r3, [r4, #8]
 8003810:	e7f4      	b.n	80037fc <__swsetup_r+0xb0>
 8003812:	2000      	movs	r0, #0
 8003814:	e7f7      	b.n	8003806 <__swsetup_r+0xba>
 8003816:	bf00      	nop
 8003818:	2000010c 	.word	0x2000010c
 800381c:	08004100 	.word	0x08004100
 8003820:	08004120 	.word	0x08004120
 8003824:	080040e0 	.word	0x080040e0

08003828 <abort>:
 8003828:	2006      	movs	r0, #6
 800382a:	b508      	push	{r3, lr}
 800382c:	f000 faba 	bl	8003da4 <raise>
 8003830:	2001      	movs	r0, #1
 8003832:	f7fd fc93 	bl	800115c <_exit>
	...

08003838 <__sflush_r>:
 8003838:	898a      	ldrh	r2, [r1, #12]
 800383a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383c:	4605      	mov	r5, r0
 800383e:	0710      	lsls	r0, r2, #28
 8003840:	460c      	mov	r4, r1
 8003842:	d457      	bmi.n	80038f4 <__sflush_r+0xbc>
 8003844:	684b      	ldr	r3, [r1, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	dc04      	bgt.n	8003854 <__sflush_r+0x1c>
 800384a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800384c:	2b00      	cmp	r3, #0
 800384e:	dc01      	bgt.n	8003854 <__sflush_r+0x1c>
 8003850:	2000      	movs	r0, #0
 8003852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003854:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003856:	2e00      	cmp	r6, #0
 8003858:	d0fa      	beq.n	8003850 <__sflush_r+0x18>
 800385a:	2300      	movs	r3, #0
 800385c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003860:	682f      	ldr	r7, [r5, #0]
 8003862:	602b      	str	r3, [r5, #0]
 8003864:	d032      	beq.n	80038cc <__sflush_r+0x94>
 8003866:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003868:	89a3      	ldrh	r3, [r4, #12]
 800386a:	075a      	lsls	r2, r3, #29
 800386c:	d505      	bpl.n	800387a <__sflush_r+0x42>
 800386e:	6863      	ldr	r3, [r4, #4]
 8003870:	1ac0      	subs	r0, r0, r3
 8003872:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003874:	b10b      	cbz	r3, 800387a <__sflush_r+0x42>
 8003876:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003878:	1ac0      	subs	r0, r0, r3
 800387a:	2300      	movs	r3, #0
 800387c:	4602      	mov	r2, r0
 800387e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003880:	4628      	mov	r0, r5
 8003882:	6a21      	ldr	r1, [r4, #32]
 8003884:	47b0      	blx	r6
 8003886:	1c43      	adds	r3, r0, #1
 8003888:	89a3      	ldrh	r3, [r4, #12]
 800388a:	d106      	bne.n	800389a <__sflush_r+0x62>
 800388c:	6829      	ldr	r1, [r5, #0]
 800388e:	291d      	cmp	r1, #29
 8003890:	d82c      	bhi.n	80038ec <__sflush_r+0xb4>
 8003892:	4a29      	ldr	r2, [pc, #164]	; (8003938 <__sflush_r+0x100>)
 8003894:	40ca      	lsrs	r2, r1
 8003896:	07d6      	lsls	r6, r2, #31
 8003898:	d528      	bpl.n	80038ec <__sflush_r+0xb4>
 800389a:	2200      	movs	r2, #0
 800389c:	6062      	str	r2, [r4, #4]
 800389e:	6922      	ldr	r2, [r4, #16]
 80038a0:	04d9      	lsls	r1, r3, #19
 80038a2:	6022      	str	r2, [r4, #0]
 80038a4:	d504      	bpl.n	80038b0 <__sflush_r+0x78>
 80038a6:	1c42      	adds	r2, r0, #1
 80038a8:	d101      	bne.n	80038ae <__sflush_r+0x76>
 80038aa:	682b      	ldr	r3, [r5, #0]
 80038ac:	b903      	cbnz	r3, 80038b0 <__sflush_r+0x78>
 80038ae:	6560      	str	r0, [r4, #84]	; 0x54
 80038b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038b2:	602f      	str	r7, [r5, #0]
 80038b4:	2900      	cmp	r1, #0
 80038b6:	d0cb      	beq.n	8003850 <__sflush_r+0x18>
 80038b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038bc:	4299      	cmp	r1, r3
 80038be:	d002      	beq.n	80038c6 <__sflush_r+0x8e>
 80038c0:	4628      	mov	r0, r5
 80038c2:	f7ff f9bb 	bl	8002c3c <_free_r>
 80038c6:	2000      	movs	r0, #0
 80038c8:	6360      	str	r0, [r4, #52]	; 0x34
 80038ca:	e7c2      	b.n	8003852 <__sflush_r+0x1a>
 80038cc:	6a21      	ldr	r1, [r4, #32]
 80038ce:	2301      	movs	r3, #1
 80038d0:	4628      	mov	r0, r5
 80038d2:	47b0      	blx	r6
 80038d4:	1c41      	adds	r1, r0, #1
 80038d6:	d1c7      	bne.n	8003868 <__sflush_r+0x30>
 80038d8:	682b      	ldr	r3, [r5, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0c4      	beq.n	8003868 <__sflush_r+0x30>
 80038de:	2b1d      	cmp	r3, #29
 80038e0:	d001      	beq.n	80038e6 <__sflush_r+0xae>
 80038e2:	2b16      	cmp	r3, #22
 80038e4:	d101      	bne.n	80038ea <__sflush_r+0xb2>
 80038e6:	602f      	str	r7, [r5, #0]
 80038e8:	e7b2      	b.n	8003850 <__sflush_r+0x18>
 80038ea:	89a3      	ldrh	r3, [r4, #12]
 80038ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038f0:	81a3      	strh	r3, [r4, #12]
 80038f2:	e7ae      	b.n	8003852 <__sflush_r+0x1a>
 80038f4:	690f      	ldr	r7, [r1, #16]
 80038f6:	2f00      	cmp	r7, #0
 80038f8:	d0aa      	beq.n	8003850 <__sflush_r+0x18>
 80038fa:	0793      	lsls	r3, r2, #30
 80038fc:	bf18      	it	ne
 80038fe:	2300      	movne	r3, #0
 8003900:	680e      	ldr	r6, [r1, #0]
 8003902:	bf08      	it	eq
 8003904:	694b      	ldreq	r3, [r1, #20]
 8003906:	1bf6      	subs	r6, r6, r7
 8003908:	600f      	str	r7, [r1, #0]
 800390a:	608b      	str	r3, [r1, #8]
 800390c:	2e00      	cmp	r6, #0
 800390e:	dd9f      	ble.n	8003850 <__sflush_r+0x18>
 8003910:	4633      	mov	r3, r6
 8003912:	463a      	mov	r2, r7
 8003914:	4628      	mov	r0, r5
 8003916:	6a21      	ldr	r1, [r4, #32]
 8003918:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800391c:	47e0      	blx	ip
 800391e:	2800      	cmp	r0, #0
 8003920:	dc06      	bgt.n	8003930 <__sflush_r+0xf8>
 8003922:	89a3      	ldrh	r3, [r4, #12]
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800392c:	81a3      	strh	r3, [r4, #12]
 800392e:	e790      	b.n	8003852 <__sflush_r+0x1a>
 8003930:	4407      	add	r7, r0
 8003932:	1a36      	subs	r6, r6, r0
 8003934:	e7ea      	b.n	800390c <__sflush_r+0xd4>
 8003936:	bf00      	nop
 8003938:	20400001 	.word	0x20400001

0800393c <_fflush_r>:
 800393c:	b538      	push	{r3, r4, r5, lr}
 800393e:	690b      	ldr	r3, [r1, #16]
 8003940:	4605      	mov	r5, r0
 8003942:	460c      	mov	r4, r1
 8003944:	b913      	cbnz	r3, 800394c <_fflush_r+0x10>
 8003946:	2500      	movs	r5, #0
 8003948:	4628      	mov	r0, r5
 800394a:	bd38      	pop	{r3, r4, r5, pc}
 800394c:	b118      	cbz	r0, 8003956 <_fflush_r+0x1a>
 800394e:	6983      	ldr	r3, [r0, #24]
 8003950:	b90b      	cbnz	r3, 8003956 <_fflush_r+0x1a>
 8003952:	f000 f887 	bl	8003a64 <__sinit>
 8003956:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <_fflush_r+0x6c>)
 8003958:	429c      	cmp	r4, r3
 800395a:	d11b      	bne.n	8003994 <_fflush_r+0x58>
 800395c:	686c      	ldr	r4, [r5, #4]
 800395e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0ef      	beq.n	8003946 <_fflush_r+0xa>
 8003966:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003968:	07d0      	lsls	r0, r2, #31
 800396a:	d404      	bmi.n	8003976 <_fflush_r+0x3a>
 800396c:	0599      	lsls	r1, r3, #22
 800396e:	d402      	bmi.n	8003976 <_fflush_r+0x3a>
 8003970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003972:	f000 f915 	bl	8003ba0 <__retarget_lock_acquire_recursive>
 8003976:	4628      	mov	r0, r5
 8003978:	4621      	mov	r1, r4
 800397a:	f7ff ff5d 	bl	8003838 <__sflush_r>
 800397e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003980:	4605      	mov	r5, r0
 8003982:	07da      	lsls	r2, r3, #31
 8003984:	d4e0      	bmi.n	8003948 <_fflush_r+0xc>
 8003986:	89a3      	ldrh	r3, [r4, #12]
 8003988:	059b      	lsls	r3, r3, #22
 800398a:	d4dd      	bmi.n	8003948 <_fflush_r+0xc>
 800398c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800398e:	f000 f908 	bl	8003ba2 <__retarget_lock_release_recursive>
 8003992:	e7d9      	b.n	8003948 <_fflush_r+0xc>
 8003994:	4b05      	ldr	r3, [pc, #20]	; (80039ac <_fflush_r+0x70>)
 8003996:	429c      	cmp	r4, r3
 8003998:	d101      	bne.n	800399e <_fflush_r+0x62>
 800399a:	68ac      	ldr	r4, [r5, #8]
 800399c:	e7df      	b.n	800395e <_fflush_r+0x22>
 800399e:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <_fflush_r+0x74>)
 80039a0:	429c      	cmp	r4, r3
 80039a2:	bf08      	it	eq
 80039a4:	68ec      	ldreq	r4, [r5, #12]
 80039a6:	e7da      	b.n	800395e <_fflush_r+0x22>
 80039a8:	08004100 	.word	0x08004100
 80039ac:	08004120 	.word	0x08004120
 80039b0:	080040e0 	.word	0x080040e0

080039b4 <std>:
 80039b4:	2300      	movs	r3, #0
 80039b6:	b510      	push	{r4, lr}
 80039b8:	4604      	mov	r4, r0
 80039ba:	e9c0 3300 	strd	r3, r3, [r0]
 80039be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80039c2:	6083      	str	r3, [r0, #8]
 80039c4:	8181      	strh	r1, [r0, #12]
 80039c6:	6643      	str	r3, [r0, #100]	; 0x64
 80039c8:	81c2      	strh	r2, [r0, #14]
 80039ca:	6183      	str	r3, [r0, #24]
 80039cc:	4619      	mov	r1, r3
 80039ce:	2208      	movs	r2, #8
 80039d0:	305c      	adds	r0, #92	; 0x5c
 80039d2:	f7ff f867 	bl	8002aa4 <memset>
 80039d6:	4b05      	ldr	r3, [pc, #20]	; (80039ec <std+0x38>)
 80039d8:	6224      	str	r4, [r4, #32]
 80039da:	6263      	str	r3, [r4, #36]	; 0x24
 80039dc:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <std+0x3c>)
 80039de:	62a3      	str	r3, [r4, #40]	; 0x28
 80039e0:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <std+0x40>)
 80039e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039e4:	4b04      	ldr	r3, [pc, #16]	; (80039f8 <std+0x44>)
 80039e6:	6323      	str	r3, [r4, #48]	; 0x30
 80039e8:	bd10      	pop	{r4, pc}
 80039ea:	bf00      	nop
 80039ec:	08003ddd 	.word	0x08003ddd
 80039f0:	08003dff 	.word	0x08003dff
 80039f4:	08003e37 	.word	0x08003e37
 80039f8:	08003e5b 	.word	0x08003e5b

080039fc <_cleanup_r>:
 80039fc:	4901      	ldr	r1, [pc, #4]	; (8003a04 <_cleanup_r+0x8>)
 80039fe:	f000 b8af 	b.w	8003b60 <_fwalk_reent>
 8003a02:	bf00      	nop
 8003a04:	0800393d 	.word	0x0800393d

08003a08 <__sfmoreglue>:
 8003a08:	2268      	movs	r2, #104	; 0x68
 8003a0a:	b570      	push	{r4, r5, r6, lr}
 8003a0c:	1e4d      	subs	r5, r1, #1
 8003a0e:	4355      	muls	r5, r2
 8003a10:	460e      	mov	r6, r1
 8003a12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a16:	f7ff f979 	bl	8002d0c <_malloc_r>
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	b140      	cbz	r0, 8003a30 <__sfmoreglue+0x28>
 8003a1e:	2100      	movs	r1, #0
 8003a20:	e9c0 1600 	strd	r1, r6, [r0]
 8003a24:	300c      	adds	r0, #12
 8003a26:	60a0      	str	r0, [r4, #8]
 8003a28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a2c:	f7ff f83a 	bl	8002aa4 <memset>
 8003a30:	4620      	mov	r0, r4
 8003a32:	bd70      	pop	{r4, r5, r6, pc}

08003a34 <__sfp_lock_acquire>:
 8003a34:	4801      	ldr	r0, [pc, #4]	; (8003a3c <__sfp_lock_acquire+0x8>)
 8003a36:	f000 b8b3 	b.w	8003ba0 <__retarget_lock_acquire_recursive>
 8003a3a:	bf00      	nop
 8003a3c:	20000331 	.word	0x20000331

08003a40 <__sfp_lock_release>:
 8003a40:	4801      	ldr	r0, [pc, #4]	; (8003a48 <__sfp_lock_release+0x8>)
 8003a42:	f000 b8ae 	b.w	8003ba2 <__retarget_lock_release_recursive>
 8003a46:	bf00      	nop
 8003a48:	20000331 	.word	0x20000331

08003a4c <__sinit_lock_acquire>:
 8003a4c:	4801      	ldr	r0, [pc, #4]	; (8003a54 <__sinit_lock_acquire+0x8>)
 8003a4e:	f000 b8a7 	b.w	8003ba0 <__retarget_lock_acquire_recursive>
 8003a52:	bf00      	nop
 8003a54:	20000332 	.word	0x20000332

08003a58 <__sinit_lock_release>:
 8003a58:	4801      	ldr	r0, [pc, #4]	; (8003a60 <__sinit_lock_release+0x8>)
 8003a5a:	f000 b8a2 	b.w	8003ba2 <__retarget_lock_release_recursive>
 8003a5e:	bf00      	nop
 8003a60:	20000332 	.word	0x20000332

08003a64 <__sinit>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	4604      	mov	r4, r0
 8003a68:	f7ff fff0 	bl	8003a4c <__sinit_lock_acquire>
 8003a6c:	69a3      	ldr	r3, [r4, #24]
 8003a6e:	b11b      	cbz	r3, 8003a78 <__sinit+0x14>
 8003a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a74:	f7ff bff0 	b.w	8003a58 <__sinit_lock_release>
 8003a78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003a7c:	6523      	str	r3, [r4, #80]	; 0x50
 8003a7e:	4b13      	ldr	r3, [pc, #76]	; (8003acc <__sinit+0x68>)
 8003a80:	4a13      	ldr	r2, [pc, #76]	; (8003ad0 <__sinit+0x6c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a86:	42a3      	cmp	r3, r4
 8003a88:	bf08      	it	eq
 8003a8a:	2301      	moveq	r3, #1
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	bf08      	it	eq
 8003a90:	61a3      	streq	r3, [r4, #24]
 8003a92:	f000 f81f 	bl	8003ad4 <__sfp>
 8003a96:	6060      	str	r0, [r4, #4]
 8003a98:	4620      	mov	r0, r4
 8003a9a:	f000 f81b 	bl	8003ad4 <__sfp>
 8003a9e:	60a0      	str	r0, [r4, #8]
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	f000 f817 	bl	8003ad4 <__sfp>
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2104      	movs	r1, #4
 8003aaa:	60e0      	str	r0, [r4, #12]
 8003aac:	6860      	ldr	r0, [r4, #4]
 8003aae:	f7ff ff81 	bl	80039b4 <std>
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	2109      	movs	r1, #9
 8003ab6:	68a0      	ldr	r0, [r4, #8]
 8003ab8:	f7ff ff7c 	bl	80039b4 <std>
 8003abc:	2202      	movs	r2, #2
 8003abe:	2112      	movs	r1, #18
 8003ac0:	68e0      	ldr	r0, [r4, #12]
 8003ac2:	f7ff ff77 	bl	80039b4 <std>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	61a3      	str	r3, [r4, #24]
 8003aca:	e7d1      	b.n	8003a70 <__sinit+0xc>
 8003acc:	08003ff8 	.word	0x08003ff8
 8003ad0:	080039fd 	.word	0x080039fd

08003ad4 <__sfp>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	4607      	mov	r7, r0
 8003ad8:	f7ff ffac 	bl	8003a34 <__sfp_lock_acquire>
 8003adc:	4b1e      	ldr	r3, [pc, #120]	; (8003b58 <__sfp+0x84>)
 8003ade:	681e      	ldr	r6, [r3, #0]
 8003ae0:	69b3      	ldr	r3, [r6, #24]
 8003ae2:	b913      	cbnz	r3, 8003aea <__sfp+0x16>
 8003ae4:	4630      	mov	r0, r6
 8003ae6:	f7ff ffbd 	bl	8003a64 <__sinit>
 8003aea:	3648      	adds	r6, #72	; 0x48
 8003aec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	d503      	bpl.n	8003afc <__sfp+0x28>
 8003af4:	6833      	ldr	r3, [r6, #0]
 8003af6:	b30b      	cbz	r3, 8003b3c <__sfp+0x68>
 8003af8:	6836      	ldr	r6, [r6, #0]
 8003afa:	e7f7      	b.n	8003aec <__sfp+0x18>
 8003afc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b00:	b9d5      	cbnz	r5, 8003b38 <__sfp+0x64>
 8003b02:	4b16      	ldr	r3, [pc, #88]	; (8003b5c <__sfp+0x88>)
 8003b04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b08:	60e3      	str	r3, [r4, #12]
 8003b0a:	6665      	str	r5, [r4, #100]	; 0x64
 8003b0c:	f000 f847 	bl	8003b9e <__retarget_lock_init_recursive>
 8003b10:	f7ff ff96 	bl	8003a40 <__sfp_lock_release>
 8003b14:	2208      	movs	r2, #8
 8003b16:	4629      	mov	r1, r5
 8003b18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003b1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003b20:	6025      	str	r5, [r4, #0]
 8003b22:	61a5      	str	r5, [r4, #24]
 8003b24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b28:	f7fe ffbc 	bl	8002aa4 <memset>
 8003b2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b34:	4620      	mov	r0, r4
 8003b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b38:	3468      	adds	r4, #104	; 0x68
 8003b3a:	e7d9      	b.n	8003af0 <__sfp+0x1c>
 8003b3c:	2104      	movs	r1, #4
 8003b3e:	4638      	mov	r0, r7
 8003b40:	f7ff ff62 	bl	8003a08 <__sfmoreglue>
 8003b44:	4604      	mov	r4, r0
 8003b46:	6030      	str	r0, [r6, #0]
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d1d5      	bne.n	8003af8 <__sfp+0x24>
 8003b4c:	f7ff ff78 	bl	8003a40 <__sfp_lock_release>
 8003b50:	230c      	movs	r3, #12
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	e7ee      	b.n	8003b34 <__sfp+0x60>
 8003b56:	bf00      	nop
 8003b58:	08003ff8 	.word	0x08003ff8
 8003b5c:	ffff0001 	.word	0xffff0001

08003b60 <_fwalk_reent>:
 8003b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b64:	4606      	mov	r6, r0
 8003b66:	4688      	mov	r8, r1
 8003b68:	2700      	movs	r7, #0
 8003b6a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b72:	f1b9 0901 	subs.w	r9, r9, #1
 8003b76:	d505      	bpl.n	8003b84 <_fwalk_reent+0x24>
 8003b78:	6824      	ldr	r4, [r4, #0]
 8003b7a:	2c00      	cmp	r4, #0
 8003b7c:	d1f7      	bne.n	8003b6e <_fwalk_reent+0xe>
 8003b7e:	4638      	mov	r0, r7
 8003b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b84:	89ab      	ldrh	r3, [r5, #12]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d907      	bls.n	8003b9a <_fwalk_reent+0x3a>
 8003b8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	d003      	beq.n	8003b9a <_fwalk_reent+0x3a>
 8003b92:	4629      	mov	r1, r5
 8003b94:	4630      	mov	r0, r6
 8003b96:	47c0      	blx	r8
 8003b98:	4307      	orrs	r7, r0
 8003b9a:	3568      	adds	r5, #104	; 0x68
 8003b9c:	e7e9      	b.n	8003b72 <_fwalk_reent+0x12>

08003b9e <__retarget_lock_init_recursive>:
 8003b9e:	4770      	bx	lr

08003ba0 <__retarget_lock_acquire_recursive>:
 8003ba0:	4770      	bx	lr

08003ba2 <__retarget_lock_release_recursive>:
 8003ba2:	4770      	bx	lr

08003ba4 <__swhatbuf_r>:
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	460e      	mov	r6, r1
 8003ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bac:	4614      	mov	r4, r2
 8003bae:	2900      	cmp	r1, #0
 8003bb0:	461d      	mov	r5, r3
 8003bb2:	b096      	sub	sp, #88	; 0x58
 8003bb4:	da08      	bge.n	8003bc8 <__swhatbuf_r+0x24>
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003bbc:	602a      	str	r2, [r5, #0]
 8003bbe:	061a      	lsls	r2, r3, #24
 8003bc0:	d410      	bmi.n	8003be4 <__swhatbuf_r+0x40>
 8003bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bc6:	e00e      	b.n	8003be6 <__swhatbuf_r+0x42>
 8003bc8:	466a      	mov	r2, sp
 8003bca:	f000 f96d 	bl	8003ea8 <_fstat_r>
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	dbf1      	blt.n	8003bb6 <__swhatbuf_r+0x12>
 8003bd2:	9a01      	ldr	r2, [sp, #4]
 8003bd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003bd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003bdc:	425a      	negs	r2, r3
 8003bde:	415a      	adcs	r2, r3
 8003be0:	602a      	str	r2, [r5, #0]
 8003be2:	e7ee      	b.n	8003bc2 <__swhatbuf_r+0x1e>
 8003be4:	2340      	movs	r3, #64	; 0x40
 8003be6:	2000      	movs	r0, #0
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	b016      	add	sp, #88	; 0x58
 8003bec:	bd70      	pop	{r4, r5, r6, pc}
	...

08003bf0 <__smakebuf_r>:
 8003bf0:	898b      	ldrh	r3, [r1, #12]
 8003bf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003bf4:	079d      	lsls	r5, r3, #30
 8003bf6:	4606      	mov	r6, r0
 8003bf8:	460c      	mov	r4, r1
 8003bfa:	d507      	bpl.n	8003c0c <__smakebuf_r+0x1c>
 8003bfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c00:	6023      	str	r3, [r4, #0]
 8003c02:	6123      	str	r3, [r4, #16]
 8003c04:	2301      	movs	r3, #1
 8003c06:	6163      	str	r3, [r4, #20]
 8003c08:	b002      	add	sp, #8
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}
 8003c0c:	466a      	mov	r2, sp
 8003c0e:	ab01      	add	r3, sp, #4
 8003c10:	f7ff ffc8 	bl	8003ba4 <__swhatbuf_r>
 8003c14:	9900      	ldr	r1, [sp, #0]
 8003c16:	4605      	mov	r5, r0
 8003c18:	4630      	mov	r0, r6
 8003c1a:	f7ff f877 	bl	8002d0c <_malloc_r>
 8003c1e:	b948      	cbnz	r0, 8003c34 <__smakebuf_r+0x44>
 8003c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c24:	059a      	lsls	r2, r3, #22
 8003c26:	d4ef      	bmi.n	8003c08 <__smakebuf_r+0x18>
 8003c28:	f023 0303 	bic.w	r3, r3, #3
 8003c2c:	f043 0302 	orr.w	r3, r3, #2
 8003c30:	81a3      	strh	r3, [r4, #12]
 8003c32:	e7e3      	b.n	8003bfc <__smakebuf_r+0xc>
 8003c34:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <__smakebuf_r+0x7c>)
 8003c36:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c38:	89a3      	ldrh	r3, [r4, #12]
 8003c3a:	6020      	str	r0, [r4, #0]
 8003c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c40:	81a3      	strh	r3, [r4, #12]
 8003c42:	9b00      	ldr	r3, [sp, #0]
 8003c44:	6120      	str	r0, [r4, #16]
 8003c46:	6163      	str	r3, [r4, #20]
 8003c48:	9b01      	ldr	r3, [sp, #4]
 8003c4a:	b15b      	cbz	r3, 8003c64 <__smakebuf_r+0x74>
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c52:	f000 f93b 	bl	8003ecc <_isatty_r>
 8003c56:	b128      	cbz	r0, 8003c64 <__smakebuf_r+0x74>
 8003c58:	89a3      	ldrh	r3, [r4, #12]
 8003c5a:	f023 0303 	bic.w	r3, r3, #3
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	81a3      	strh	r3, [r4, #12]
 8003c64:	89a0      	ldrh	r0, [r4, #12]
 8003c66:	4305      	orrs	r5, r0
 8003c68:	81a5      	strh	r5, [r4, #12]
 8003c6a:	e7cd      	b.n	8003c08 <__smakebuf_r+0x18>
 8003c6c:	080039fd 	.word	0x080039fd

08003c70 <memchr>:
 8003c70:	4603      	mov	r3, r0
 8003c72:	b510      	push	{r4, lr}
 8003c74:	b2c9      	uxtb	r1, r1
 8003c76:	4402      	add	r2, r0
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	d101      	bne.n	8003c82 <memchr+0x12>
 8003c7e:	2000      	movs	r0, #0
 8003c80:	e003      	b.n	8003c8a <memchr+0x1a>
 8003c82:	7804      	ldrb	r4, [r0, #0]
 8003c84:	3301      	adds	r3, #1
 8003c86:	428c      	cmp	r4, r1
 8003c88:	d1f6      	bne.n	8003c78 <memchr+0x8>
 8003c8a:	bd10      	pop	{r4, pc}

08003c8c <memcpy>:
 8003c8c:	440a      	add	r2, r1
 8003c8e:	4291      	cmp	r1, r2
 8003c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c94:	d100      	bne.n	8003c98 <memcpy+0xc>
 8003c96:	4770      	bx	lr
 8003c98:	b510      	push	{r4, lr}
 8003c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c9e:	4291      	cmp	r1, r2
 8003ca0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ca4:	d1f9      	bne.n	8003c9a <memcpy+0xe>
 8003ca6:	bd10      	pop	{r4, pc}

08003ca8 <memmove>:
 8003ca8:	4288      	cmp	r0, r1
 8003caa:	b510      	push	{r4, lr}
 8003cac:	eb01 0402 	add.w	r4, r1, r2
 8003cb0:	d902      	bls.n	8003cb8 <memmove+0x10>
 8003cb2:	4284      	cmp	r4, r0
 8003cb4:	4623      	mov	r3, r4
 8003cb6:	d807      	bhi.n	8003cc8 <memmove+0x20>
 8003cb8:	1e43      	subs	r3, r0, #1
 8003cba:	42a1      	cmp	r1, r4
 8003cbc:	d008      	beq.n	8003cd0 <memmove+0x28>
 8003cbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003cc6:	e7f8      	b.n	8003cba <memmove+0x12>
 8003cc8:	4601      	mov	r1, r0
 8003cca:	4402      	add	r2, r0
 8003ccc:	428a      	cmp	r2, r1
 8003cce:	d100      	bne.n	8003cd2 <memmove+0x2a>
 8003cd0:	bd10      	pop	{r4, pc}
 8003cd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003cd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003cda:	e7f7      	b.n	8003ccc <memmove+0x24>

08003cdc <__malloc_lock>:
 8003cdc:	4801      	ldr	r0, [pc, #4]	; (8003ce4 <__malloc_lock+0x8>)
 8003cde:	f7ff bf5f 	b.w	8003ba0 <__retarget_lock_acquire_recursive>
 8003ce2:	bf00      	nop
 8003ce4:	20000330 	.word	0x20000330

08003ce8 <__malloc_unlock>:
 8003ce8:	4801      	ldr	r0, [pc, #4]	; (8003cf0 <__malloc_unlock+0x8>)
 8003cea:	f7ff bf5a 	b.w	8003ba2 <__retarget_lock_release_recursive>
 8003cee:	bf00      	nop
 8003cf0:	20000330 	.word	0x20000330

08003cf4 <_realloc_r>:
 8003cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cf8:	4680      	mov	r8, r0
 8003cfa:	4614      	mov	r4, r2
 8003cfc:	460e      	mov	r6, r1
 8003cfe:	b921      	cbnz	r1, 8003d0a <_realloc_r+0x16>
 8003d00:	4611      	mov	r1, r2
 8003d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d06:	f7ff b801 	b.w	8002d0c <_malloc_r>
 8003d0a:	b92a      	cbnz	r2, 8003d18 <_realloc_r+0x24>
 8003d0c:	f7fe ff96 	bl	8002c3c <_free_r>
 8003d10:	4625      	mov	r5, r4
 8003d12:	4628      	mov	r0, r5
 8003d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d18:	f000 f8fa 	bl	8003f10 <_malloc_usable_size_r>
 8003d1c:	4284      	cmp	r4, r0
 8003d1e:	4607      	mov	r7, r0
 8003d20:	d802      	bhi.n	8003d28 <_realloc_r+0x34>
 8003d22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003d26:	d812      	bhi.n	8003d4e <_realloc_r+0x5a>
 8003d28:	4621      	mov	r1, r4
 8003d2a:	4640      	mov	r0, r8
 8003d2c:	f7fe ffee 	bl	8002d0c <_malloc_r>
 8003d30:	4605      	mov	r5, r0
 8003d32:	2800      	cmp	r0, #0
 8003d34:	d0ed      	beq.n	8003d12 <_realloc_r+0x1e>
 8003d36:	42bc      	cmp	r4, r7
 8003d38:	4622      	mov	r2, r4
 8003d3a:	4631      	mov	r1, r6
 8003d3c:	bf28      	it	cs
 8003d3e:	463a      	movcs	r2, r7
 8003d40:	f7ff ffa4 	bl	8003c8c <memcpy>
 8003d44:	4631      	mov	r1, r6
 8003d46:	4640      	mov	r0, r8
 8003d48:	f7fe ff78 	bl	8002c3c <_free_r>
 8003d4c:	e7e1      	b.n	8003d12 <_realloc_r+0x1e>
 8003d4e:	4635      	mov	r5, r6
 8003d50:	e7df      	b.n	8003d12 <_realloc_r+0x1e>

08003d52 <_raise_r>:
 8003d52:	291f      	cmp	r1, #31
 8003d54:	b538      	push	{r3, r4, r5, lr}
 8003d56:	4604      	mov	r4, r0
 8003d58:	460d      	mov	r5, r1
 8003d5a:	d904      	bls.n	8003d66 <_raise_r+0x14>
 8003d5c:	2316      	movs	r3, #22
 8003d5e:	6003      	str	r3, [r0, #0]
 8003d60:	f04f 30ff 	mov.w	r0, #4294967295
 8003d64:	bd38      	pop	{r3, r4, r5, pc}
 8003d66:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003d68:	b112      	cbz	r2, 8003d70 <_raise_r+0x1e>
 8003d6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003d6e:	b94b      	cbnz	r3, 8003d84 <_raise_r+0x32>
 8003d70:	4620      	mov	r0, r4
 8003d72:	f000 f831 	bl	8003dd8 <_getpid_r>
 8003d76:	462a      	mov	r2, r5
 8003d78:	4601      	mov	r1, r0
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d80:	f000 b818 	b.w	8003db4 <_kill_r>
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d00a      	beq.n	8003d9e <_raise_r+0x4c>
 8003d88:	1c59      	adds	r1, r3, #1
 8003d8a:	d103      	bne.n	8003d94 <_raise_r+0x42>
 8003d8c:	2316      	movs	r3, #22
 8003d8e:	6003      	str	r3, [r0, #0]
 8003d90:	2001      	movs	r0, #1
 8003d92:	e7e7      	b.n	8003d64 <_raise_r+0x12>
 8003d94:	2400      	movs	r4, #0
 8003d96:	4628      	mov	r0, r5
 8003d98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003d9c:	4798      	blx	r3
 8003d9e:	2000      	movs	r0, #0
 8003da0:	e7e0      	b.n	8003d64 <_raise_r+0x12>
	...

08003da4 <raise>:
 8003da4:	4b02      	ldr	r3, [pc, #8]	; (8003db0 <raise+0xc>)
 8003da6:	4601      	mov	r1, r0
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	f7ff bfd2 	b.w	8003d52 <_raise_r>
 8003dae:	bf00      	nop
 8003db0:	2000010c 	.word	0x2000010c

08003db4 <_kill_r>:
 8003db4:	b538      	push	{r3, r4, r5, lr}
 8003db6:	2300      	movs	r3, #0
 8003db8:	4d06      	ldr	r5, [pc, #24]	; (8003dd4 <_kill_r+0x20>)
 8003dba:	4604      	mov	r4, r0
 8003dbc:	4608      	mov	r0, r1
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	602b      	str	r3, [r5, #0]
 8003dc2:	f7fd f9bb 	bl	800113c <_kill>
 8003dc6:	1c43      	adds	r3, r0, #1
 8003dc8:	d102      	bne.n	8003dd0 <_kill_r+0x1c>
 8003dca:	682b      	ldr	r3, [r5, #0]
 8003dcc:	b103      	cbz	r3, 8003dd0 <_kill_r+0x1c>
 8003dce:	6023      	str	r3, [r4, #0]
 8003dd0:	bd38      	pop	{r3, r4, r5, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000334 	.word	0x20000334

08003dd8 <_getpid_r>:
 8003dd8:	f7fd b9a9 	b.w	800112e <_getpid>

08003ddc <__sread>:
 8003ddc:	b510      	push	{r4, lr}
 8003dde:	460c      	mov	r4, r1
 8003de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003de4:	f000 f89c 	bl	8003f20 <_read_r>
 8003de8:	2800      	cmp	r0, #0
 8003dea:	bfab      	itete	ge
 8003dec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003dee:	89a3      	ldrhlt	r3, [r4, #12]
 8003df0:	181b      	addge	r3, r3, r0
 8003df2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003df6:	bfac      	ite	ge
 8003df8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003dfa:	81a3      	strhlt	r3, [r4, #12]
 8003dfc:	bd10      	pop	{r4, pc}

08003dfe <__swrite>:
 8003dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e02:	461f      	mov	r7, r3
 8003e04:	898b      	ldrh	r3, [r1, #12]
 8003e06:	4605      	mov	r5, r0
 8003e08:	05db      	lsls	r3, r3, #23
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	4616      	mov	r6, r2
 8003e0e:	d505      	bpl.n	8003e1c <__swrite+0x1e>
 8003e10:	2302      	movs	r3, #2
 8003e12:	2200      	movs	r2, #0
 8003e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e18:	f000 f868 	bl	8003eec <_lseek_r>
 8003e1c:	89a3      	ldrh	r3, [r4, #12]
 8003e1e:	4632      	mov	r2, r6
 8003e20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e24:	81a3      	strh	r3, [r4, #12]
 8003e26:	4628      	mov	r0, r5
 8003e28:	463b      	mov	r3, r7
 8003e2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e32:	f000 b817 	b.w	8003e64 <_write_r>

08003e36 <__sseek>:
 8003e36:	b510      	push	{r4, lr}
 8003e38:	460c      	mov	r4, r1
 8003e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e3e:	f000 f855 	bl	8003eec <_lseek_r>
 8003e42:	1c43      	adds	r3, r0, #1
 8003e44:	89a3      	ldrh	r3, [r4, #12]
 8003e46:	bf15      	itete	ne
 8003e48:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e52:	81a3      	strheq	r3, [r4, #12]
 8003e54:	bf18      	it	ne
 8003e56:	81a3      	strhne	r3, [r4, #12]
 8003e58:	bd10      	pop	{r4, pc}

08003e5a <__sclose>:
 8003e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e5e:	f000 b813 	b.w	8003e88 <_close_r>
	...

08003e64 <_write_r>:
 8003e64:	b538      	push	{r3, r4, r5, lr}
 8003e66:	4604      	mov	r4, r0
 8003e68:	4608      	mov	r0, r1
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	4d05      	ldr	r5, [pc, #20]	; (8003e84 <_write_r+0x20>)
 8003e70:	602a      	str	r2, [r5, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	f7fd f999 	bl	80011aa <_write>
 8003e78:	1c43      	adds	r3, r0, #1
 8003e7a:	d102      	bne.n	8003e82 <_write_r+0x1e>
 8003e7c:	682b      	ldr	r3, [r5, #0]
 8003e7e:	b103      	cbz	r3, 8003e82 <_write_r+0x1e>
 8003e80:	6023      	str	r3, [r4, #0]
 8003e82:	bd38      	pop	{r3, r4, r5, pc}
 8003e84:	20000334 	.word	0x20000334

08003e88 <_close_r>:
 8003e88:	b538      	push	{r3, r4, r5, lr}
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	4d05      	ldr	r5, [pc, #20]	; (8003ea4 <_close_r+0x1c>)
 8003e8e:	4604      	mov	r4, r0
 8003e90:	4608      	mov	r0, r1
 8003e92:	602b      	str	r3, [r5, #0]
 8003e94:	f7fd f9a5 	bl	80011e2 <_close>
 8003e98:	1c43      	adds	r3, r0, #1
 8003e9a:	d102      	bne.n	8003ea2 <_close_r+0x1a>
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	b103      	cbz	r3, 8003ea2 <_close_r+0x1a>
 8003ea0:	6023      	str	r3, [r4, #0]
 8003ea2:	bd38      	pop	{r3, r4, r5, pc}
 8003ea4:	20000334 	.word	0x20000334

08003ea8 <_fstat_r>:
 8003ea8:	b538      	push	{r3, r4, r5, lr}
 8003eaa:	2300      	movs	r3, #0
 8003eac:	4d06      	ldr	r5, [pc, #24]	; (8003ec8 <_fstat_r+0x20>)
 8003eae:	4604      	mov	r4, r0
 8003eb0:	4608      	mov	r0, r1
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	602b      	str	r3, [r5, #0]
 8003eb6:	f7fd f99f 	bl	80011f8 <_fstat>
 8003eba:	1c43      	adds	r3, r0, #1
 8003ebc:	d102      	bne.n	8003ec4 <_fstat_r+0x1c>
 8003ebe:	682b      	ldr	r3, [r5, #0]
 8003ec0:	b103      	cbz	r3, 8003ec4 <_fstat_r+0x1c>
 8003ec2:	6023      	str	r3, [r4, #0]
 8003ec4:	bd38      	pop	{r3, r4, r5, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000334 	.word	0x20000334

08003ecc <_isatty_r>:
 8003ecc:	b538      	push	{r3, r4, r5, lr}
 8003ece:	2300      	movs	r3, #0
 8003ed0:	4d05      	ldr	r5, [pc, #20]	; (8003ee8 <_isatty_r+0x1c>)
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	4608      	mov	r0, r1
 8003ed6:	602b      	str	r3, [r5, #0]
 8003ed8:	f7fd f99d 	bl	8001216 <_isatty>
 8003edc:	1c43      	adds	r3, r0, #1
 8003ede:	d102      	bne.n	8003ee6 <_isatty_r+0x1a>
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	b103      	cbz	r3, 8003ee6 <_isatty_r+0x1a>
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
 8003ee8:	20000334 	.word	0x20000334

08003eec <_lseek_r>:
 8003eec:	b538      	push	{r3, r4, r5, lr}
 8003eee:	4604      	mov	r4, r0
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	4d05      	ldr	r5, [pc, #20]	; (8003f0c <_lseek_r+0x20>)
 8003ef8:	602a      	str	r2, [r5, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f7fd f995 	bl	800122a <_lseek>
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	d102      	bne.n	8003f0a <_lseek_r+0x1e>
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	b103      	cbz	r3, 8003f0a <_lseek_r+0x1e>
 8003f08:	6023      	str	r3, [r4, #0]
 8003f0a:	bd38      	pop	{r3, r4, r5, pc}
 8003f0c:	20000334 	.word	0x20000334

08003f10 <_malloc_usable_size_r>:
 8003f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f14:	1f18      	subs	r0, r3, #4
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	bfbc      	itt	lt
 8003f1a:	580b      	ldrlt	r3, [r1, r0]
 8003f1c:	18c0      	addlt	r0, r0, r3
 8003f1e:	4770      	bx	lr

08003f20 <_read_r>:
 8003f20:	b538      	push	{r3, r4, r5, lr}
 8003f22:	4604      	mov	r4, r0
 8003f24:	4608      	mov	r0, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	2200      	movs	r2, #0
 8003f2a:	4d05      	ldr	r5, [pc, #20]	; (8003f40 <_read_r+0x20>)
 8003f2c:	602a      	str	r2, [r5, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f7fd f91e 	bl	8001170 <_read>
 8003f34:	1c43      	adds	r3, r0, #1
 8003f36:	d102      	bne.n	8003f3e <_read_r+0x1e>
 8003f38:	682b      	ldr	r3, [r5, #0]
 8003f3a:	b103      	cbz	r3, 8003f3e <_read_r+0x1e>
 8003f3c:	6023      	str	r3, [r4, #0]
 8003f3e:	bd38      	pop	{r3, r4, r5, pc}
 8003f40:	20000334 	.word	0x20000334

08003f44 <_init>:
 8003f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f46:	bf00      	nop
 8003f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4a:	bc08      	pop	{r3}
 8003f4c:	469e      	mov	lr, r3
 8003f4e:	4770      	bx	lr

08003f50 <_fini>:
 8003f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f52:	bf00      	nop
 8003f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f56:	bc08      	pop	{r3}
 8003f58:	469e      	mov	lr, r3
 8003f5a:	4770      	bx	lr
